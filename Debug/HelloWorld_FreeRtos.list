
HelloWorld_FreeRtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08004e94  08004e94  00014e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fb4  08004fb4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004fb4  08004fb4  00014fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fbc  08004fbc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fbc  08004fbc  00014fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fc0  08004fc0  00014fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010c0  20000074  08005038  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001134  08005038  00021134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017014  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dc7  00000000  00000000  000370b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  00039e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e0  00000000  00000000  0003b178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000283d6  00000000  00000000  0003c358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001556e  00000000  00000000  0006472e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc0a5  00000000  00000000  00079c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00175d41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005224  00000000  00000000  00175d94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004e7c 	.word	0x08004e7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004e7c 	.word	0x08004e7c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <vApplicationGetIdleTaskMemory+0x30>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000090 	.word	0x20000090
 8000504:	20000144 	.word	0x20000144

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b5b0      	push	{r4, r5, r7, lr}
 800050a:	b08e      	sub	sp, #56	; 0x38
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fabb 	bl	8000a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f833 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f8b3 	bl	8000680 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800051a:	f000 f881 	bl	8000620 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800051e:	4b13      	ldr	r3, [pc, #76]	; (800056c <main+0x64>)
 8000520:	f107 041c 	add.w	r4, r7, #28
 8000524:	461d      	mov	r5, r3
 8000526:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800052e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000532:	f107 031c 	add.w	r3, r7, #28
 8000536:	2100      	movs	r1, #0
 8000538:	4618      	mov	r0, r3
 800053a:	f003 f953 	bl	80037e4 <osThreadCreate>
 800053e:	4603      	mov	r3, r0
 8000540:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <main+0x68>)
 8000542:	6013      	str	r3, [r2, #0]

  /* definition and creation of toggle2 */
  osThreadDef(toggle2, ToggleLedGreen, osPriorityNormal, 0, 128);
 8000544:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <main+0x6c>)
 8000546:	463c      	mov	r4, r7
 8000548:	461d      	mov	r5, r3
 800054a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800054e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000552:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  toggle2Handle = osThreadCreate(osThread(toggle2), NULL);
 8000556:	463b      	mov	r3, r7
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f003 f942 	bl	80037e4 <osThreadCreate>
 8000560:	4603      	mov	r3, r0
 8000562:	4a05      	ldr	r2, [pc, #20]	; (8000578 <main+0x70>)
 8000564:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000566:	f003 f936 	bl	80037d6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056a:	e7fe      	b.n	800056a <main+0x62>
 800056c:	08004ea8 	.word	0x08004ea8
 8000570:	200003c8 	.word	0x200003c8
 8000574:	08004ec4 	.word	0x08004ec4
 8000578:	200003cc 	.word	0x200003cc

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b096      	sub	sp, #88	; 0x58
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	2244      	movs	r2, #68	; 0x44
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f004 fbac 	bl	8004ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	463b      	mov	r3, r7
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800059e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005a2:	f000 fda1 	bl	80010e8 <HAL_PWREx_ControlVoltageScaling>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005ac:	f000 f90c 	bl	80007c8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b0:	2302      	movs	r3, #2
 80005b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ba:	2310      	movs	r3, #16
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c2:	2302      	movs	r3, #2
 80005c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005c6:	2301      	movs	r3, #1
 80005c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005ca:	230a      	movs	r3, #10
 80005cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005ce:	2307      	movs	r3, #7
 80005d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 fdd8 	bl	8001194 <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005ea:	f000 f8ed 	bl	80007c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2303      	movs	r3, #3
 80005f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000602:	463b      	mov	r3, r7
 8000604:	2104      	movs	r1, #4
 8000606:	4618      	mov	r0, r3
 8000608:	f001 f9a0 	bl	800194c <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000612:	f000 f8d9 	bl	80007c8 <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3758      	adds	r7, #88	; 0x58
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000624:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_USART2_UART_Init+0x58>)
 8000626:	4a15      	ldr	r2, [pc, #84]	; (800067c <MX_USART2_UART_Init+0x5c>)
 8000628:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800062a:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MX_USART2_UART_Init+0x58>)
 800062c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000630:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_USART2_UART_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_USART2_UART_Init+0x58>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_USART2_UART_Init+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_USART2_UART_Init+0x58>)
 8000646:	220c      	movs	r2, #12
 8000648:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <MX_USART2_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_USART2_UART_Init+0x58>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <MX_USART2_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_USART2_UART_Init+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_USART2_UART_Init+0x58>)
 8000664:	f002 fb56 	bl	8002d14 <HAL_UART_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800066e:	f000 f8ab 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000344 	.word	0x20000344
 800067c:	40004400 	.word	0x40004400

08000680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000696:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <MX_GPIO_Init+0xc4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	4a2a      	ldr	r2, [pc, #168]	; (8000744 <MX_GPIO_Init+0xc4>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a2:	4b28      	ldr	r3, [pc, #160]	; (8000744 <MX_GPIO_Init+0xc4>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ae:	4b25      	ldr	r3, [pc, #148]	; (8000744 <MX_GPIO_Init+0xc4>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	4a24      	ldr	r2, [pc, #144]	; (8000744 <MX_GPIO_Init+0xc4>)
 80006b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ba:	4b22      	ldr	r3, [pc, #136]	; (8000744 <MX_GPIO_Init+0xc4>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <MX_GPIO_Init+0xc4>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	4a1e      	ldr	r2, [pc, #120]	; (8000744 <MX_GPIO_Init+0xc4>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d2:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <MX_GPIO_Init+0xc4>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <MX_GPIO_Init+0xc4>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	4a18      	ldr	r2, [pc, #96]	; (8000744 <MX_GPIO_Init+0xc4>)
 80006e4:	f043 0302 	orr.w	r3, r3, #2
 80006e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ea:	4b16      	ldr	r3, [pc, #88]	; (8000744 <MX_GPIO_Init+0xc4>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	f003 0302 	and.w	r3, r3, #2
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2120      	movs	r1, #32
 80006fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fe:	f000 fcb3 	bl	8001068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000702:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000708:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800070c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4619      	mov	r1, r3
 8000718:	480b      	ldr	r0, [pc, #44]	; (8000748 <MX_GPIO_Init+0xc8>)
 800071a:	f000 fafb 	bl	8000d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800071e:	2320      	movs	r3, #32
 8000720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000722:	2301      	movs	r3, #1
 8000724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	2300      	movs	r3, #0
 800072c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	4619      	mov	r1, r3
 8000734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000738:	f000 faec 	bl	8000d14 <HAL_GPIO_Init>

}
 800073c:	bf00      	nop
 800073e:	3728      	adds	r7, #40	; 0x28
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40021000 	.word	0x40021000
 8000748:	48000800 	.word	0x48000800

0800074c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000754:	2001      	movs	r0, #1
 8000756:	f003 f891 	bl	800387c <osDelay>
 800075a:	e7fb      	b.n	8000754 <StartDefaultTask+0x8>

0800075c <ToggleLedGreen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ToggleLedGreen */
void ToggleLedGreen(void const * argument)
{
 800075c:	b5b0      	push	{r4, r5, r7, lr}
 800075e:	b08c      	sub	sp, #48	; 0x30
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ToggleLedGreen */
  /* Infinite loop */
	const uint8_t data [] = "hello world from task Led Green\r\n";
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <ToggleLedGreen+0x40>)
 8000766:	f107 040c 	add.w	r4, r7, #12
 800076a:	461d      	mov	r5, r3
 800076c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800076e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000774:	682b      	ldr	r3, [r5, #0]
 8000776:	8023      	strh	r3, [r4, #0]
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000778:	2120      	movs	r1, #32
 800077a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077e:	f000 fc8b 	bl	8001098 <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart2,data, sizeof(data),500);
 8000782:	f107 010c 	add.w	r1, r7, #12
 8000786:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800078a:	2222      	movs	r2, #34	; 0x22
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <ToggleLedGreen+0x44>)
 800078e:	f002 fb0f 	bl	8002db0 <HAL_UART_Transmit>
    HAL_Delay(1000);
 8000792:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000796:	f000 f9b7 	bl	8000b08 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800079a:	e7ed      	b.n	8000778 <ToggleLedGreen+0x1c>
 800079c:	08004ee0 	.word	0x08004ee0
 80007a0:	20000344 	.word	0x20000344

080007a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d101      	bne.n	80007ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007b6:	f000 f987 	bl	8000ac8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40001000 	.word	0x40001000

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <Error_Handler+0x8>
	...

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <HAL_MspInit+0x4c>)
 80007dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007de:	4a10      	ldr	r2, [pc, #64]	; (8000820 <HAL_MspInit+0x4c>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6613      	str	r3, [r2, #96]	; 0x60
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <HAL_MspInit+0x4c>)
 80007e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <HAL_MspInit+0x4c>)
 80007f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <HAL_MspInit+0x4c>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fc:	6593      	str	r3, [r2, #88]	; 0x58
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <HAL_MspInit+0x4c>)
 8000800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	210f      	movs	r1, #15
 800080e:	f06f 0001 	mvn.w	r0, #1
 8000812:	f000 fa55 	bl	8000cc0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40021000 	.word	0x40021000

08000824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b0ac      	sub	sp, #176	; 0xb0
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	2288      	movs	r2, #136	; 0x88
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f004 fa4f 	bl	8004ce8 <memset>
  if(huart->Instance==USART2)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a21      	ldr	r2, [pc, #132]	; (80008d4 <HAL_UART_MspInit+0xb0>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d13b      	bne.n	80008cc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000854:	2302      	movs	r3, #2
 8000856:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000858:	2300      	movs	r3, #0
 800085a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4618      	mov	r0, r3
 8000862:	f001 fac9 	bl	8001df8 <HAL_RCCEx_PeriphCLKConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800086c:	f7ff ffac 	bl	80007c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000870:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <HAL_UART_MspInit+0xb4>)
 8000872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000874:	4a18      	ldr	r2, [pc, #96]	; (80008d8 <HAL_UART_MspInit+0xb4>)
 8000876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087a:	6593      	str	r3, [r2, #88]	; 0x58
 800087c:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <HAL_UART_MspInit+0xb4>)
 800087e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <HAL_UART_MspInit+0xb4>)
 800088a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088c:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <HAL_UART_MspInit+0xb4>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000894:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <HAL_UART_MspInit+0xb4>)
 8000896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008a0:	230c      	movs	r3, #12
 80008a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008b8:	2307      	movs	r3, #7
 80008ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008c2:	4619      	mov	r1, r3
 80008c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c8:	f000 fa24 	bl	8000d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008cc:	bf00      	nop
 80008ce:	37b0      	adds	r7, #176	; 0xb0
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40004400 	.word	0x40004400
 80008d8:	40021000 	.word	0x40021000

080008dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08e      	sub	sp, #56	; 0x38
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008e4:	2300      	movs	r3, #0
 80008e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008ea:	4b34      	ldr	r3, [pc, #208]	; (80009bc <HAL_InitTick+0xe0>)
 80008ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ee:	4a33      	ldr	r2, [pc, #204]	; (80009bc <HAL_InitTick+0xe0>)
 80008f0:	f043 0310 	orr.w	r3, r3, #16
 80008f4:	6593      	str	r3, [r2, #88]	; 0x58
 80008f6:	4b31      	ldr	r3, [pc, #196]	; (80009bc <HAL_InitTick+0xe0>)
 80008f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fa:	f003 0310 	and.w	r3, r3, #16
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000902:	f107 0210 	add.w	r2, r7, #16
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4611      	mov	r1, r2
 800090c:	4618      	mov	r0, r3
 800090e:	f001 f9e1 	bl	8001cd4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000912:	6a3b      	ldr	r3, [r7, #32]
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000918:	2b00      	cmp	r3, #0
 800091a:	d103      	bne.n	8000924 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800091c:	f001 f9ae 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 8000920:	6378      	str	r0, [r7, #52]	; 0x34
 8000922:	e004      	b.n	800092e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000924:	f001 f9aa 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 8000928:	4603      	mov	r3, r0
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800092e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000930:	4a23      	ldr	r2, [pc, #140]	; (80009c0 <HAL_InitTick+0xe4>)
 8000932:	fba2 2303 	umull	r2, r3, r2, r3
 8000936:	0c9b      	lsrs	r3, r3, #18
 8000938:	3b01      	subs	r3, #1
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800093c:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <HAL_InitTick+0xe8>)
 800093e:	4a22      	ldr	r2, [pc, #136]	; (80009c8 <HAL_InitTick+0xec>)
 8000940:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000942:	4b20      	ldr	r3, [pc, #128]	; (80009c4 <HAL_InitTick+0xe8>)
 8000944:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000948:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800094a:	4a1e      	ldr	r2, [pc, #120]	; (80009c4 <HAL_InitTick+0xe8>)
 800094c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800094e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000950:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <HAL_InitTick+0xe8>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000956:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <HAL_InitTick+0xe8>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095c:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <HAL_InitTick+0xe8>)
 800095e:	2200      	movs	r2, #0
 8000960:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000962:	4818      	ldr	r0, [pc, #96]	; (80009c4 <HAL_InitTick+0xe8>)
 8000964:	f001 ff04 	bl	8002770 <HAL_TIM_Base_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800096e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000972:	2b00      	cmp	r3, #0
 8000974:	d11b      	bne.n	80009ae <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000976:	4813      	ldr	r0, [pc, #76]	; (80009c4 <HAL_InitTick+0xe8>)
 8000978:	f001 ff5c 	bl	8002834 <HAL_TIM_Base_Start_IT>
 800097c:	4603      	mov	r3, r0
 800097e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000982:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000986:	2b00      	cmp	r3, #0
 8000988:	d111      	bne.n	80009ae <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800098a:	2036      	movs	r0, #54	; 0x36
 800098c:	f000 f9b4 	bl	8000cf8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b0f      	cmp	r3, #15
 8000994:	d808      	bhi.n	80009a8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000996:	2200      	movs	r2, #0
 8000998:	6879      	ldr	r1, [r7, #4]
 800099a:	2036      	movs	r0, #54	; 0x36
 800099c:	f000 f990 	bl	8000cc0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009a0:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <HAL_InitTick+0xf0>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
 80009a6:	e002      	b.n	80009ae <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80009a8:	2301      	movs	r3, #1
 80009aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3738      	adds	r7, #56	; 0x38
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40021000 	.word	0x40021000
 80009c0:	431bde83 	.word	0x431bde83
 80009c4:	200003d0 	.word	0x200003d0
 80009c8:	40001000 	.word	0x40001000
 80009cc:	20000004 	.word	0x20000004

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <NMI_Handler+0x4>

080009d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <MemManage_Handler+0x4>

080009e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <UsageFault_Handler+0x4>

080009ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <TIM6_DAC_IRQHandler+0x10>)
 8000a02:	f001 ff87 	bl	8002914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200003d0 	.word	0x200003d0

08000a10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <SystemInit+0x20>)
 8000a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1a:	4a05      	ldr	r2, [pc, #20]	; (8000a30 <SystemInit+0x20>)
 8000a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a38:	f7ff ffea 	bl	8000a10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a3c:	480c      	ldr	r0, [pc, #48]	; (8000a70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a3e:	490d      	ldr	r1, [pc, #52]	; (8000a74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a40:	4a0d      	ldr	r2, [pc, #52]	; (8000a78 <LoopForever+0xe>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a44:	e002      	b.n	8000a4c <LoopCopyDataInit>

08000a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4a:	3304      	adds	r3, #4

08000a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a50:	d3f9      	bcc.n	8000a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a52:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a54:	4c0a      	ldr	r4, [pc, #40]	; (8000a80 <LoopForever+0x16>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a58:	e001      	b.n	8000a5e <LoopFillZerobss>

08000a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a5c:	3204      	adds	r2, #4

08000a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a60:	d3fb      	bcc.n	8000a5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a62:	f004 f91b 	bl	8004c9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a66:	f7ff fd4f 	bl	8000508 <main>

08000a6a <LoopForever>:

LoopForever:
    b LoopForever
 8000a6a:	e7fe      	b.n	8000a6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a6c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a74:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a78:	08004fc4 	.word	0x08004fc4
  ldr r2, =_sbss
 8000a7c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a80:	20001134 	.word	0x20001134

08000a84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a84:	e7fe      	b.n	8000a84 <ADC1_2_IRQHandler>
	...

08000a88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <HAL_Init+0x3c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a0b      	ldr	r2, [pc, #44]	; (8000ac4 <HAL_Init+0x3c>)
 8000a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9e:	2003      	movs	r0, #3
 8000aa0:	f000 f903 	bl	8000caa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aa4:	200f      	movs	r0, #15
 8000aa6:	f7ff ff19 	bl	80008dc <HAL_InitTick>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d002      	beq.n	8000ab6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	71fb      	strb	r3, [r7, #7]
 8000ab4:	e001      	b.n	8000aba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ab6:	f7ff fe8d 	bl	80007d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aba:	79fb      	ldrb	r3, [r7, #7]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40022000 	.word	0x40022000

08000ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x20>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_IncTick+0x24>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <HAL_IncTick+0x24>)
 8000ada:	6013      	str	r3, [r2, #0]
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	2000041c 	.word	0x2000041c

08000af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return uwTick;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <HAL_GetTick+0x14>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	2000041c 	.word	0x2000041c

08000b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b10:	f7ff ffee 	bl	8000af0 <HAL_GetTick>
 8000b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b20:	d005      	beq.n	8000b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <HAL_Delay+0x44>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b2e:	bf00      	nop
 8000b30:	f7ff ffde 	bl	8000af0 <HAL_GetTick>
 8000b34:	4602      	mov	r2, r0
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d8f7      	bhi.n	8000b30 <HAL_Delay+0x28>
  {
  }
}
 8000b40:	bf00      	nop
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000008 	.word	0x20000008

08000b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b82:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	60d3      	str	r3, [r2, #12]
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	0a1b      	lsrs	r3, r3, #8
 8000ba2:	f003 0307 	and.w	r3, r3, #7
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	db0b      	blt.n	8000bde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	f003 021f 	and.w	r2, r3, #31
 8000bcc:	4907      	ldr	r1, [pc, #28]	; (8000bec <__NVIC_EnableIRQ+0x38>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	095b      	lsrs	r3, r3, #5
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000e100 	.word	0xe000e100

08000bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	6039      	str	r1, [r7, #0]
 8000bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db0a      	blt.n	8000c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	490c      	ldr	r1, [pc, #48]	; (8000c3c <__NVIC_SetPriority+0x4c>)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	0112      	lsls	r2, r2, #4
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	440b      	add	r3, r1
 8000c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c18:	e00a      	b.n	8000c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4908      	ldr	r1, [pc, #32]	; (8000c40 <__NVIC_SetPriority+0x50>)
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	f003 030f 	and.w	r3, r3, #15
 8000c26:	3b04      	subs	r3, #4
 8000c28:	0112      	lsls	r2, r2, #4
 8000c2a:	b2d2      	uxtb	r2, r2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	761a      	strb	r2, [r3, #24]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000e100 	.word	0xe000e100
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b089      	sub	sp, #36	; 0x24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	f1c3 0307 	rsb	r3, r3, #7
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	bf28      	it	cs
 8000c62:	2304      	movcs	r3, #4
 8000c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3304      	adds	r3, #4
 8000c6a:	2b06      	cmp	r3, #6
 8000c6c:	d902      	bls.n	8000c74 <NVIC_EncodePriority+0x30>
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3b03      	subs	r3, #3
 8000c72:	e000      	b.n	8000c76 <NVIC_EncodePriority+0x32>
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	f04f 32ff 	mov.w	r2, #4294967295
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43da      	mvns	r2, r3
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	401a      	ands	r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	fa01 f303 	lsl.w	r3, r1, r3
 8000c96:	43d9      	mvns	r1, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	4313      	orrs	r3, r2
         );
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3724      	adds	r7, #36	; 0x24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff ff4c 	bl	8000b50 <__NVIC_SetPriorityGrouping>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
 8000ccc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd2:	f7ff ff61 	bl	8000b98 <__NVIC_GetPriorityGrouping>
 8000cd6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	68b9      	ldr	r1, [r7, #8]
 8000cdc:	6978      	ldr	r0, [r7, #20]
 8000cde:	f7ff ffb1 	bl	8000c44 <NVIC_EncodePriority>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce8:	4611      	mov	r1, r2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff ff80 	bl	8000bf0 <__NVIC_SetPriority>
}
 8000cf0:	bf00      	nop
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff ff54 	bl	8000bb4 <__NVIC_EnableIRQ>
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b087      	sub	sp, #28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d22:	e17f      	b.n	8001024 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	2101      	movs	r1, #1
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d30:	4013      	ands	r3, r2
 8000d32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f000 8171 	beq.w	800101e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 0303 	and.w	r3, r3, #3
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d005      	beq.n	8000d54 <HAL_GPIO_Init+0x40>
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d130      	bne.n	8000db6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	2203      	movs	r2, #3
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	68da      	ldr	r2, [r3, #12]
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	091b      	lsrs	r3, r3, #4
 8000da0:	f003 0201 	and.w	r2, r3, #1
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 0303 	and.w	r3, r3, #3
 8000dbe:	2b03      	cmp	r3, #3
 8000dc0:	d118      	bne.n	8000df4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000dc8:	2201      	movs	r2, #1
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	08db      	lsrs	r3, r3, #3
 8000dde:	f003 0201 	and.w	r2, r3, #1
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	2b03      	cmp	r3, #3
 8000dfe:	d017      	beq.n	8000e30 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d123      	bne.n	8000e84 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	08da      	lsrs	r2, r3, #3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3208      	adds	r2, #8
 8000e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	f003 0307 	and.w	r3, r3, #7
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	220f      	movs	r2, #15
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	691a      	ldr	r2, [r3, #16]
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	08da      	lsrs	r2, r3, #3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3208      	adds	r2, #8
 8000e7e:	6939      	ldr	r1, [r7, #16]
 8000e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	2203      	movs	r2, #3
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0203 	and.w	r2, r3, #3
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 80ac 	beq.w	800101e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec6:	4b5f      	ldr	r3, [pc, #380]	; (8001044 <HAL_GPIO_Init+0x330>)
 8000ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eca:	4a5e      	ldr	r2, [pc, #376]	; (8001044 <HAL_GPIO_Init+0x330>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ed2:	4b5c      	ldr	r3, [pc, #368]	; (8001044 <HAL_GPIO_Init+0x330>)
 8000ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ede:	4a5a      	ldr	r2, [pc, #360]	; (8001048 <HAL_GPIO_Init+0x334>)
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	f003 0303 	and.w	r3, r3, #3
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	220f      	movs	r2, #15
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f08:	d025      	beq.n	8000f56 <HAL_GPIO_Init+0x242>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4f      	ldr	r2, [pc, #316]	; (800104c <HAL_GPIO_Init+0x338>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d01f      	beq.n	8000f52 <HAL_GPIO_Init+0x23e>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4e      	ldr	r2, [pc, #312]	; (8001050 <HAL_GPIO_Init+0x33c>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d019      	beq.n	8000f4e <HAL_GPIO_Init+0x23a>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4d      	ldr	r2, [pc, #308]	; (8001054 <HAL_GPIO_Init+0x340>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d013      	beq.n	8000f4a <HAL_GPIO_Init+0x236>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4c      	ldr	r2, [pc, #304]	; (8001058 <HAL_GPIO_Init+0x344>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d00d      	beq.n	8000f46 <HAL_GPIO_Init+0x232>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a4b      	ldr	r2, [pc, #300]	; (800105c <HAL_GPIO_Init+0x348>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d007      	beq.n	8000f42 <HAL_GPIO_Init+0x22e>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a4a      	ldr	r2, [pc, #296]	; (8001060 <HAL_GPIO_Init+0x34c>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d101      	bne.n	8000f3e <HAL_GPIO_Init+0x22a>
 8000f3a:	2306      	movs	r3, #6
 8000f3c:	e00c      	b.n	8000f58 <HAL_GPIO_Init+0x244>
 8000f3e:	2307      	movs	r3, #7
 8000f40:	e00a      	b.n	8000f58 <HAL_GPIO_Init+0x244>
 8000f42:	2305      	movs	r3, #5
 8000f44:	e008      	b.n	8000f58 <HAL_GPIO_Init+0x244>
 8000f46:	2304      	movs	r3, #4
 8000f48:	e006      	b.n	8000f58 <HAL_GPIO_Init+0x244>
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e004      	b.n	8000f58 <HAL_GPIO_Init+0x244>
 8000f4e:	2302      	movs	r3, #2
 8000f50:	e002      	b.n	8000f58 <HAL_GPIO_Init+0x244>
 8000f52:	2301      	movs	r3, #1
 8000f54:	e000      	b.n	8000f58 <HAL_GPIO_Init+0x244>
 8000f56:	2300      	movs	r3, #0
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	f002 0203 	and.w	r2, r2, #3
 8000f5e:	0092      	lsls	r2, r2, #2
 8000f60:	4093      	lsls	r3, r2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f68:	4937      	ldr	r1, [pc, #220]	; (8001048 <HAL_GPIO_Init+0x334>)
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	089b      	lsrs	r3, r3, #2
 8000f6e:	3302      	adds	r3, #2
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f76:	4b3b      	ldr	r3, [pc, #236]	; (8001064 <HAL_GPIO_Init+0x350>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f9a:	4a32      	ldr	r2, [pc, #200]	; (8001064 <HAL_GPIO_Init+0x350>)
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fa0:	4b30      	ldr	r3, [pc, #192]	; (8001064 <HAL_GPIO_Init+0x350>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fc4:	4a27      	ldr	r2, [pc, #156]	; (8001064 <HAL_GPIO_Init+0x350>)
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fca:	4b26      	ldr	r3, [pc, #152]	; (8001064 <HAL_GPIO_Init+0x350>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fee:	4a1d      	ldr	r2, [pc, #116]	; (8001064 <HAL_GPIO_Init+0x350>)
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <HAL_GPIO_Init+0x350>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001018:	4a12      	ldr	r2, [pc, #72]	; (8001064 <HAL_GPIO_Init+0x350>)
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	3301      	adds	r3, #1
 8001022:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa22 f303 	lsr.w	r3, r2, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	f47f ae78 	bne.w	8000d24 <HAL_GPIO_Init+0x10>
  }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	371c      	adds	r7, #28
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40021000 	.word	0x40021000
 8001048:	40010000 	.word	0x40010000
 800104c:	48000400 	.word	0x48000400
 8001050:	48000800 	.word	0x48000800
 8001054:	48000c00 	.word	0x48000c00
 8001058:	48001000 	.word	0x48001000
 800105c:	48001400 	.word	0x48001400
 8001060:	48001800 	.word	0x48001800
 8001064:	40010400 	.word	0x40010400

08001068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	807b      	strh	r3, [r7, #2]
 8001074:	4613      	mov	r3, r2
 8001076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001078:	787b      	ldrb	r3, [r7, #1]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800107e:	887a      	ldrh	r2, [r7, #2]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001084:	e002      	b.n	800108c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001086:	887a      	ldrh	r2, [r7, #2]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010aa:	887a      	ldrh	r2, [r7, #2]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4013      	ands	r3, r2
 80010b0:	041a      	lsls	r2, r3, #16
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	43d9      	mvns	r1, r3
 80010b6:	887b      	ldrh	r3, [r7, #2]
 80010b8:	400b      	ands	r3, r1
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	619a      	str	r2, [r3, #24]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40007000 	.word	0x40007000

080010e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010f6:	d130      	bne.n	800115a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010f8:	4b23      	ldr	r3, [pc, #140]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001104:	d038      	beq.n	8001178 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001106:	4b20      	ldr	r3, [pc, #128]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800110e:	4a1e      	ldr	r2, [pc, #120]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001110:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001114:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2232      	movs	r2, #50	; 0x32
 800111c:	fb02 f303 	mul.w	r3, r2, r3
 8001120:	4a1b      	ldr	r2, [pc, #108]	; (8001190 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001122:	fba2 2303 	umull	r2, r3, r2, r3
 8001126:	0c9b      	lsrs	r3, r3, #18
 8001128:	3301      	adds	r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800112c:	e002      	b.n	8001134 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	3b01      	subs	r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001134:	4b14      	ldr	r3, [pc, #80]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800113c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001140:	d102      	bne.n	8001148 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1f2      	bne.n	800112e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001154:	d110      	bne.n	8001178 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e00f      	b.n	800117a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001166:	d007      	beq.n	8001178 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001170:	4a05      	ldr	r2, [pc, #20]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001172:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001176:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40007000 	.word	0x40007000
 800118c:	20000000 	.word	0x20000000
 8001190:	431bde83 	.word	0x431bde83

08001194 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e3ca      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011a6:	4b97      	ldr	r3, [pc, #604]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 030c 	and.w	r3, r3, #12
 80011ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011b0:	4b94      	ldr	r3, [pc, #592]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0310 	and.w	r3, r3, #16
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 80e4 	beq.w	8001390 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d007      	beq.n	80011de <HAL_RCC_OscConfig+0x4a>
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	2b0c      	cmp	r3, #12
 80011d2:	f040 808b 	bne.w	80012ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	f040 8087 	bne.w	80012ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011de:	4b89      	ldr	r3, [pc, #548]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d005      	beq.n	80011f6 <HAL_RCC_OscConfig+0x62>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e3a2      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a1a      	ldr	r2, [r3, #32]
 80011fa:	4b82      	ldr	r3, [pc, #520]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	2b00      	cmp	r3, #0
 8001204:	d004      	beq.n	8001210 <HAL_RCC_OscConfig+0x7c>
 8001206:	4b7f      	ldr	r3, [pc, #508]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800120e:	e005      	b.n	800121c <HAL_RCC_OscConfig+0x88>
 8001210:	4b7c      	ldr	r3, [pc, #496]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001216:	091b      	lsrs	r3, r3, #4
 8001218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800121c:	4293      	cmp	r3, r2
 800121e:	d223      	bcs.n	8001268 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	4618      	mov	r0, r3
 8001226:	f000 fd87 	bl	8001d38 <RCC_SetFlashLatencyFromMSIRange>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e383      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001234:	4b73      	ldr	r3, [pc, #460]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a72      	ldr	r2, [pc, #456]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 800123a:	f043 0308 	orr.w	r3, r3, #8
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	4b70      	ldr	r3, [pc, #448]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	496d      	ldr	r1, [pc, #436]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 800124e:	4313      	orrs	r3, r2
 8001250:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001252:	4b6c      	ldr	r3, [pc, #432]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	4968      	ldr	r1, [pc, #416]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001262:	4313      	orrs	r3, r2
 8001264:	604b      	str	r3, [r1, #4]
 8001266:	e025      	b.n	80012b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001268:	4b66      	ldr	r3, [pc, #408]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a65      	ldr	r2, [pc, #404]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 800126e:	f043 0308 	orr.w	r3, r3, #8
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b63      	ldr	r3, [pc, #396]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	4960      	ldr	r1, [pc, #384]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001282:	4313      	orrs	r3, r2
 8001284:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001286:	4b5f      	ldr	r3, [pc, #380]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	495b      	ldr	r1, [pc, #364]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001296:	4313      	orrs	r3, r2
 8001298:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d109      	bne.n	80012b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 fd47 	bl	8001d38 <RCC_SetFlashLatencyFromMSIRange>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e343      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012b4:	f000 fc4a 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 80012b8:	4602      	mov	r2, r0
 80012ba:	4b52      	ldr	r3, [pc, #328]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	091b      	lsrs	r3, r3, #4
 80012c0:	f003 030f 	and.w	r3, r3, #15
 80012c4:	4950      	ldr	r1, [pc, #320]	; (8001408 <HAL_RCC_OscConfig+0x274>)
 80012c6:	5ccb      	ldrb	r3, [r1, r3]
 80012c8:	f003 031f 	and.w	r3, r3, #31
 80012cc:	fa22 f303 	lsr.w	r3, r2, r3
 80012d0:	4a4e      	ldr	r2, [pc, #312]	; (800140c <HAL_RCC_OscConfig+0x278>)
 80012d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012d4:	4b4e      	ldr	r3, [pc, #312]	; (8001410 <HAL_RCC_OscConfig+0x27c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff faff 	bl	80008dc <HAL_InitTick>
 80012de:	4603      	mov	r3, r0
 80012e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d052      	beq.n	800138e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	e327      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d032      	beq.n	800135a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012f4:	4b43      	ldr	r3, [pc, #268]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a42      	ldr	r2, [pc, #264]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001300:	f7ff fbf6 	bl	8000af0 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001308:	f7ff fbf2 	bl	8000af0 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e310      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800131a:	4b3a      	ldr	r3, [pc, #232]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0f0      	beq.n	8001308 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001326:	4b37      	ldr	r3, [pc, #220]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a36      	ldr	r2, [pc, #216]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 800132c:	f043 0308 	orr.w	r3, r3, #8
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	4b34      	ldr	r3, [pc, #208]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	4931      	ldr	r1, [pc, #196]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001340:	4313      	orrs	r3, r2
 8001342:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001344:	4b2f      	ldr	r3, [pc, #188]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69db      	ldr	r3, [r3, #28]
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	492c      	ldr	r1, [pc, #176]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
 8001358:	e01a      	b.n	8001390 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800135a:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a29      	ldr	r2, [pc, #164]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001360:	f023 0301 	bic.w	r3, r3, #1
 8001364:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001366:	f7ff fbc3 	bl	8000af0 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800136e:	f7ff fbbf 	bl	8000af0 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e2dd      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001380:	4b20      	ldr	r3, [pc, #128]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f0      	bne.n	800136e <HAL_RCC_OscConfig+0x1da>
 800138c:	e000      	b.n	8001390 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800138e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	2b00      	cmp	r3, #0
 800139a:	d074      	beq.n	8001486 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d005      	beq.n	80013ae <HAL_RCC_OscConfig+0x21a>
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	2b0c      	cmp	r3, #12
 80013a6:	d10e      	bne.n	80013c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d10b      	bne.n	80013c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d064      	beq.n	8001484 <HAL_RCC_OscConfig+0x2f0>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d160      	bne.n	8001484 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e2ba      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ce:	d106      	bne.n	80013de <HAL_RCC_OscConfig+0x24a>
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80013d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	e026      	b.n	800142c <HAL_RCC_OscConfig+0x298>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e6:	d115      	bne.n	8001414 <HAL_RCC_OscConfig+0x280>
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a05      	ldr	r2, [pc, #20]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80013ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	4b03      	ldr	r3, [pc, #12]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a02      	ldr	r2, [pc, #8]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80013fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	e014      	b.n	800142c <HAL_RCC_OscConfig+0x298>
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000
 8001408:	08004f0c 	.word	0x08004f0c
 800140c:	20000000 	.word	0x20000000
 8001410:	20000004 	.word	0x20000004
 8001414:	4ba0      	ldr	r3, [pc, #640]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a9f      	ldr	r2, [pc, #636]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 800141a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b9d      	ldr	r3, [pc, #628]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a9c      	ldr	r2, [pc, #624]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d013      	beq.n	800145c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001434:	f7ff fb5c 	bl	8000af0 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800143c:	f7ff fb58 	bl	8000af0 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b64      	cmp	r3, #100	; 0x64
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e276      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800144e:	4b92      	ldr	r3, [pc, #584]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x2a8>
 800145a:	e014      	b.n	8001486 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff fb48 	bl	8000af0 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001464:	f7ff fb44 	bl	8000af0 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	; 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e262      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001476:	4b88      	ldr	r3, [pc, #544]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x2d0>
 8001482:	e000      	b.n	8001486 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d060      	beq.n	8001554 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	2b04      	cmp	r3, #4
 8001496:	d005      	beq.n	80014a4 <HAL_RCC_OscConfig+0x310>
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	2b0c      	cmp	r3, #12
 800149c:	d119      	bne.n	80014d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d116      	bne.n	80014d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014a4:	4b7c      	ldr	r3, [pc, #496]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <HAL_RCC_OscConfig+0x328>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e23f      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014bc:	4b76      	ldr	r3, [pc, #472]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	061b      	lsls	r3, r3, #24
 80014ca:	4973      	ldr	r1, [pc, #460]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014d0:	e040      	b.n	8001554 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d023      	beq.n	8001522 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014da:	4b6f      	ldr	r3, [pc, #444]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a6e      	ldr	r2, [pc, #440]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80014e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e6:	f7ff fb03 	bl	8000af0 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ee:	f7ff faff 	bl	8000af0 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e21d      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001500:	4b65      	ldr	r3, [pc, #404]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150c:	4b62      	ldr	r3, [pc, #392]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	061b      	lsls	r3, r3, #24
 800151a:	495f      	ldr	r1, [pc, #380]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]
 8001520:	e018      	b.n	8001554 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001522:	4b5d      	ldr	r3, [pc, #372]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a5c      	ldr	r2, [pc, #368]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800152c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152e:	f7ff fadf 	bl	8000af0 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001536:	f7ff fadb 	bl	8000af0 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e1f9      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001548:	4b53      	ldr	r3, [pc, #332]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f0      	bne.n	8001536 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0308 	and.w	r3, r3, #8
 800155c:	2b00      	cmp	r3, #0
 800155e:	d03c      	beq.n	80015da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d01c      	beq.n	80015a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001568:	4b4b      	ldr	r3, [pc, #300]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 800156a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800156e:	4a4a      	ldr	r2, [pc, #296]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001578:	f7ff faba 	bl	8000af0 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001580:	f7ff fab6 	bl	8000af0 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e1d4      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001592:	4b41      	ldr	r3, [pc, #260]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0ef      	beq.n	8001580 <HAL_RCC_OscConfig+0x3ec>
 80015a0:	e01b      	b.n	80015da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a2:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80015a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a8:	4a3b      	ldr	r2, [pc, #236]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80015aa:	f023 0301 	bic.w	r3, r3, #1
 80015ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b2:	f7ff fa9d 	bl	8000af0 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ba:	f7ff fa99 	bl	8000af0 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e1b7      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015cc:	4b32      	ldr	r3, [pc, #200]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80015ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1ef      	bne.n	80015ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 80a6 	beq.w	8001734 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e8:	2300      	movs	r3, #0
 80015ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015ec:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80015ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d10d      	bne.n	8001614 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f8:	4b27      	ldr	r3, [pc, #156]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80015fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fc:	4a26      	ldr	r2, [pc, #152]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80015fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001602:	6593      	str	r3, [r2, #88]	; 0x58
 8001604:	4b24      	ldr	r3, [pc, #144]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001610:	2301      	movs	r3, #1
 8001612:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001614:	4b21      	ldr	r3, [pc, #132]	; (800169c <HAL_RCC_OscConfig+0x508>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161c:	2b00      	cmp	r3, #0
 800161e:	d118      	bne.n	8001652 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001620:	4b1e      	ldr	r3, [pc, #120]	; (800169c <HAL_RCC_OscConfig+0x508>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a1d      	ldr	r2, [pc, #116]	; (800169c <HAL_RCC_OscConfig+0x508>)
 8001626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800162c:	f7ff fa60 	bl	8000af0 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001634:	f7ff fa5c 	bl	8000af0 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e17a      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_RCC_OscConfig+0x508>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d108      	bne.n	800166c <HAL_RCC_OscConfig+0x4d8>
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 800165c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001660:	4a0d      	ldr	r2, [pc, #52]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800166a:	e029      	b.n	80016c0 <HAL_RCC_OscConfig+0x52c>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2b05      	cmp	r3, #5
 8001672:	d115      	bne.n	80016a0 <HAL_RCC_OscConfig+0x50c>
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800167a:	4a07      	ldr	r2, [pc, #28]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800168a:	4a03      	ldr	r2, [pc, #12]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001694:	e014      	b.n	80016c0 <HAL_RCC_OscConfig+0x52c>
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000
 800169c:	40007000 	.word	0x40007000
 80016a0:	4b9c      	ldr	r3, [pc, #624]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80016a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a6:	4a9b      	ldr	r2, [pc, #620]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80016a8:	f023 0301 	bic.w	r3, r3, #1
 80016ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016b0:	4b98      	ldr	r3, [pc, #608]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80016b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b6:	4a97      	ldr	r2, [pc, #604]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80016b8:	f023 0304 	bic.w	r3, r3, #4
 80016bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d016      	beq.n	80016f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c8:	f7ff fa12 	bl	8000af0 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ce:	e00a      	b.n	80016e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d0:	f7ff fa0e 	bl	8000af0 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	; 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e12a      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016e6:	4b8b      	ldr	r3, [pc, #556]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80016e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0ed      	beq.n	80016d0 <HAL_RCC_OscConfig+0x53c>
 80016f4:	e015      	b.n	8001722 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f6:	f7ff f9fb 	bl	8000af0 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016fc:	e00a      	b.n	8001714 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fe:	f7ff f9f7 	bl	8000af0 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	f241 3288 	movw	r2, #5000	; 0x1388
 800170c:	4293      	cmp	r3, r2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e113      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001714:	4b7f      	ldr	r3, [pc, #508]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 8001716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1ed      	bne.n	80016fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001722:	7ffb      	ldrb	r3, [r7, #31]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d105      	bne.n	8001734 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001728:	4b7a      	ldr	r3, [pc, #488]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 800172a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172c:	4a79      	ldr	r2, [pc, #484]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 800172e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001732:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 80fe 	beq.w	800193a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001742:	2b02      	cmp	r3, #2
 8001744:	f040 80d0 	bne.w	80018e8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001748:	4b72      	ldr	r3, [pc, #456]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f003 0203 	and.w	r2, r3, #3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001758:	429a      	cmp	r2, r3
 800175a:	d130      	bne.n	80017be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	3b01      	subs	r3, #1
 8001768:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800176a:	429a      	cmp	r2, r3
 800176c:	d127      	bne.n	80017be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001778:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800177a:	429a      	cmp	r2, r3
 800177c:	d11f      	bne.n	80017be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001788:	2a07      	cmp	r2, #7
 800178a:	bf14      	ite	ne
 800178c:	2201      	movne	r2, #1
 800178e:	2200      	moveq	r2, #0
 8001790:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001792:	4293      	cmp	r3, r2
 8001794:	d113      	bne.n	80017be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a0:	085b      	lsrs	r3, r3, #1
 80017a2:	3b01      	subs	r3, #1
 80017a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d109      	bne.n	80017be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	085b      	lsrs	r3, r3, #1
 80017b6:	3b01      	subs	r3, #1
 80017b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d06e      	beq.n	800189c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	2b0c      	cmp	r3, #12
 80017c2:	d069      	beq.n	8001898 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017c4:	4b53      	ldr	r3, [pc, #332]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d105      	bne.n	80017dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017d0:	4b50      	ldr	r3, [pc, #320]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0ad      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017e0:	4b4c      	ldr	r3, [pc, #304]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a4b      	ldr	r2, [pc, #300]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80017e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017ec:	f7ff f980 	bl	8000af0 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff f97c 	bl	8000af0 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e09a      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001806:	4b43      	ldr	r3, [pc, #268]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001812:	4b40      	ldr	r3, [pc, #256]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	4b40      	ldr	r3, [pc, #256]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 8001818:	4013      	ands	r3, r2
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001822:	3a01      	subs	r2, #1
 8001824:	0112      	lsls	r2, r2, #4
 8001826:	4311      	orrs	r1, r2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800182c:	0212      	lsls	r2, r2, #8
 800182e:	4311      	orrs	r1, r2
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001834:	0852      	lsrs	r2, r2, #1
 8001836:	3a01      	subs	r2, #1
 8001838:	0552      	lsls	r2, r2, #21
 800183a:	4311      	orrs	r1, r2
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001840:	0852      	lsrs	r2, r2, #1
 8001842:	3a01      	subs	r2, #1
 8001844:	0652      	lsls	r2, r2, #25
 8001846:	4311      	orrs	r1, r2
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800184c:	0912      	lsrs	r2, r2, #4
 800184e:	0452      	lsls	r2, r2, #17
 8001850:	430a      	orrs	r2, r1
 8001852:	4930      	ldr	r1, [pc, #192]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 8001854:	4313      	orrs	r3, r2
 8001856:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001858:	4b2e      	ldr	r3, [pc, #184]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a2d      	ldr	r2, [pc, #180]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 800185e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001862:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001864:	4b2b      	ldr	r3, [pc, #172]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	4a2a      	ldr	r2, [pc, #168]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 800186a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800186e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001870:	f7ff f93e 	bl	8000af0 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff f93a 	bl	8000af0 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e058      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800188a:	4b22      	ldr	r3, [pc, #136]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001896:	e050      	b.n	800193a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e04f      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800189c:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d148      	bne.n	800193a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018a8:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a19      	ldr	r2, [pc, #100]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80018ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018b4:	4b17      	ldr	r3, [pc, #92]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	4a16      	ldr	r2, [pc, #88]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80018ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018c0:	f7ff f916 	bl	8000af0 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c8:	f7ff f912 	bl	8000af0 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e030      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0f0      	beq.n	80018c8 <HAL_RCC_OscConfig+0x734>
 80018e6:	e028      	b.n	800193a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	2b0c      	cmp	r3, #12
 80018ec:	d023      	beq.n	8001936 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a08      	ldr	r2, [pc, #32]	; (8001914 <HAL_RCC_OscConfig+0x780>)
 80018f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fa:	f7ff f8f9 	bl	8000af0 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001900:	e00c      	b.n	800191c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001902:	f7ff f8f5 	bl	8000af0 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d905      	bls.n	800191c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e013      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
 8001914:	40021000 	.word	0x40021000
 8001918:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1ec      	bne.n	8001902 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	4905      	ldr	r1, [pc, #20]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_RCC_OscConfig+0x7b4>)
 8001930:	4013      	ands	r3, r2
 8001932:	60cb      	str	r3, [r1, #12]
 8001934:	e001      	b.n	800193a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3720      	adds	r7, #32
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40021000 	.word	0x40021000
 8001948:	feeefffc 	.word	0xfeeefffc

0800194c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0e7      	b.n	8001b30 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001960:	4b75      	ldr	r3, [pc, #468]	; (8001b38 <HAL_RCC_ClockConfig+0x1ec>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d910      	bls.n	8001990 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196e:	4b72      	ldr	r3, [pc, #456]	; (8001b38 <HAL_RCC_ClockConfig+0x1ec>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 0207 	bic.w	r2, r3, #7
 8001976:	4970      	ldr	r1, [pc, #448]	; (8001b38 <HAL_RCC_ClockConfig+0x1ec>)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	4313      	orrs	r3, r2
 800197c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800197e:	4b6e      	ldr	r3, [pc, #440]	; (8001b38 <HAL_RCC_ClockConfig+0x1ec>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d001      	beq.n	8001990 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0cf      	b.n	8001b30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d010      	beq.n	80019be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	4b66      	ldr	r3, [pc, #408]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d908      	bls.n	80019be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ac:	4b63      	ldr	r3, [pc, #396]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	4960      	ldr	r1, [pc, #384]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d04c      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d107      	bne.n	80019e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d2:	4b5a      	ldr	r3, [pc, #360]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d121      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e0a6      	b.n	8001b30 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ea:	4b54      	ldr	r3, [pc, #336]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d115      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e09a      	b.n	8001b30 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d107      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a02:	4b4e      	ldr	r3, [pc, #312]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d109      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e08e      	b.n	8001b30 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a12:	4b4a      	ldr	r3, [pc, #296]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e086      	b.n	8001b30 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a22:	4b46      	ldr	r3, [pc, #280]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f023 0203 	bic.w	r2, r3, #3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4943      	ldr	r1, [pc, #268]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a34:	f7ff f85c 	bl	8000af0 <HAL_GetTick>
 8001a38:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3a:	e00a      	b.n	8001a52 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3c:	f7ff f858 	bl	8000af0 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e06e      	b.n	8001b30 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a52:	4b3a      	ldr	r3, [pc, #232]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 020c 	and.w	r2, r3, #12
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d1eb      	bne.n	8001a3c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d010      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	4b31      	ldr	r3, [pc, #196]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d208      	bcs.n	8001a92 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a80:	4b2e      	ldr	r3, [pc, #184]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	492b      	ldr	r1, [pc, #172]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a92:	4b29      	ldr	r3, [pc, #164]	; (8001b38 <HAL_RCC_ClockConfig+0x1ec>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d210      	bcs.n	8001ac2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa0:	4b25      	ldr	r3, [pc, #148]	; (8001b38 <HAL_RCC_ClockConfig+0x1ec>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f023 0207 	bic.w	r2, r3, #7
 8001aa8:	4923      	ldr	r1, [pc, #140]	; (8001b38 <HAL_RCC_ClockConfig+0x1ec>)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab0:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <HAL_RCC_ClockConfig+0x1ec>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d001      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e036      	b.n	8001b30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d008      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ace:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	4918      	ldr	r1, [pc, #96]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d009      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4910      	ldr	r1, [pc, #64]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b00:	f000 f824 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 8001b04:	4602      	mov	r2, r0
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <HAL_RCC_ClockConfig+0x1f0>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	091b      	lsrs	r3, r3, #4
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	490b      	ldr	r1, [pc, #44]	; (8001b40 <HAL_RCC_ClockConfig+0x1f4>)
 8001b12:	5ccb      	ldrb	r3, [r1, r3]
 8001b14:	f003 031f 	and.w	r3, r3, #31
 8001b18:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1c:	4a09      	ldr	r2, [pc, #36]	; (8001b44 <HAL_RCC_ClockConfig+0x1f8>)
 8001b1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_RCC_ClockConfig+0x1fc>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fed9 	bl	80008dc <HAL_InitTick>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b2e:	7afb      	ldrb	r3, [r7, #11]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40022000 	.word	0x40022000
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	08004f0c 	.word	0x08004f0c
 8001b44:	20000000 	.word	0x20000000
 8001b48:	20000004 	.word	0x20000004

08001b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	; 0x24
 8001b50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
 8001b56:	2300      	movs	r3, #0
 8001b58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b5a:	4b3e      	ldr	r3, [pc, #248]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b64:	4b3b      	ldr	r3, [pc, #236]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <HAL_RCC_GetSysClockFreq+0x34>
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	2b0c      	cmp	r3, #12
 8001b78:	d121      	bne.n	8001bbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d11e      	bne.n	8001bbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b80:	4b34      	ldr	r3, [pc, #208]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0308 	and.w	r3, r3, #8
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d107      	bne.n	8001b9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b8c:	4b31      	ldr	r3, [pc, #196]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	0a1b      	lsrs	r3, r3, #8
 8001b94:	f003 030f 	and.w	r3, r3, #15
 8001b98:	61fb      	str	r3, [r7, #28]
 8001b9a:	e005      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b9c:	4b2d      	ldr	r3, [pc, #180]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ba8:	4a2b      	ldr	r2, [pc, #172]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10d      	bne.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bbc:	e00a      	b.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d102      	bne.n	8001bca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bc4:	4b25      	ldr	r3, [pc, #148]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x110>)
 8001bc6:	61bb      	str	r3, [r7, #24]
 8001bc8:	e004      	b.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bd0:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	2b0c      	cmp	r3, #12
 8001bd8:	d134      	bne.n	8001c44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bda:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d003      	beq.n	8001bf2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	d003      	beq.n	8001bf8 <HAL_RCC_GetSysClockFreq+0xac>
 8001bf0:	e005      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x110>)
 8001bf4:	617b      	str	r3, [r7, #20]
      break;
 8001bf6:	e005      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bf8:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bfa:	617b      	str	r3, [r7, #20]
      break;
 8001bfc:	e002      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	617b      	str	r3, [r7, #20]
      break;
 8001c02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c04:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	091b      	lsrs	r3, r3, #4
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	3301      	adds	r3, #1
 8001c10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	0a1b      	lsrs	r3, r3, #8
 8001c18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	fb03 f202 	mul.w	r2, r3, r2
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	0e5b      	lsrs	r3, r3, #25
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	3301      	adds	r3, #1
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c44:	69bb      	ldr	r3, [r7, #24]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3724      	adds	r7, #36	; 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000
 8001c58:	08004f24 	.word	0x08004f24
 8001c5c:	00f42400 	.word	0x00f42400
 8001c60:	007a1200 	.word	0x007a1200

08001c64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000000 	.word	0x20000000

08001c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c80:	f7ff fff0 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	0a1b      	lsrs	r3, r3, #8
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	4904      	ldr	r1, [pc, #16]	; (8001ca4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c92:	5ccb      	ldrb	r3, [r1, r3]
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	08004f1c 	.word	0x08004f1c

08001ca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cac:	f7ff ffda 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	0adb      	lsrs	r3, r3, #11
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	4904      	ldr	r1, [pc, #16]	; (8001cd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cbe:	5ccb      	ldrb	r3, [r1, r3]
 8001cc0:	f003 031f 	and.w	r3, r3, #31
 8001cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	08004f1c 	.word	0x08004f1c

08001cd4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	220f      	movs	r2, #15
 8001ce2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0203 	and.w	r2, r3, #3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001d08:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	08db      	lsrs	r3, r3, #3
 8001d0e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <HAL_RCC_GetClockConfig+0x60>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0207 	and.w	r2, r3, #7
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	601a      	str	r2, [r3, #0]
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40022000 	.word	0x40022000

08001d38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d44:	4b2a      	ldr	r3, [pc, #168]	; (8001df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d50:	f7ff f9bc 	bl	80010cc <HAL_PWREx_GetVoltageRange>
 8001d54:	6178      	str	r0, [r7, #20]
 8001d56:	e014      	b.n	8001d82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d58:	4b25      	ldr	r3, [pc, #148]	; (8001df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5c:	4a24      	ldr	r2, [pc, #144]	; (8001df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d62:	6593      	str	r3, [r2, #88]	; 0x58
 8001d64:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d70:	f7ff f9ac 	bl	80010cc <HAL_PWREx_GetVoltageRange>
 8001d74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d76:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7a:	4a1d      	ldr	r2, [pc, #116]	; (8001df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d80:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d88:	d10b      	bne.n	8001da2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b80      	cmp	r3, #128	; 0x80
 8001d8e:	d919      	bls.n	8001dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2ba0      	cmp	r3, #160	; 0xa0
 8001d94:	d902      	bls.n	8001d9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d96:	2302      	movs	r3, #2
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	e013      	b.n	8001dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	e010      	b.n	8001dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b80      	cmp	r3, #128	; 0x80
 8001da6:	d902      	bls.n	8001dae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001da8:	2303      	movs	r3, #3
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	e00a      	b.n	8001dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b80      	cmp	r3, #128	; 0x80
 8001db2:	d102      	bne.n	8001dba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001db4:	2302      	movs	r3, #2
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	e004      	b.n	8001dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b70      	cmp	r3, #112	; 0x70
 8001dbe:	d101      	bne.n	8001dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 0207 	bic.w	r2, r3, #7
 8001dcc:	4909      	ldr	r1, [pc, #36]	; (8001df4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001dd4:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d001      	beq.n	8001de6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40022000 	.word	0x40022000

08001df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e00:	2300      	movs	r3, #0
 8001e02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e04:	2300      	movs	r3, #0
 8001e06:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d041      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e18:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e1c:	d02a      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e1e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e22:	d824      	bhi.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e28:	d008      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e2e:	d81e      	bhi.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00a      	beq.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e38:	d010      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e3a:	e018      	b.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e3c:	4b86      	ldr	r3, [pc, #536]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	4a85      	ldr	r2, [pc, #532]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e46:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e48:	e015      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	2100      	movs	r1, #0
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 fabb 	bl	80023cc <RCCEx_PLLSAI1_Config>
 8001e56:	4603      	mov	r3, r0
 8001e58:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e5a:	e00c      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3320      	adds	r3, #32
 8001e60:	2100      	movs	r1, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 fba6 	bl	80025b4 <RCCEx_PLLSAI2_Config>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e6c:	e003      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	74fb      	strb	r3, [r7, #19]
      break;
 8001e72:	e000      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e76:	7cfb      	ldrb	r3, [r7, #19]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10b      	bne.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e7c:	4b76      	ldr	r3, [pc, #472]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e8a:	4973      	ldr	r1, [pc, #460]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e92:	e001      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e94:	7cfb      	ldrb	r3, [r7, #19]
 8001e96:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d041      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ea8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001eac:	d02a      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001eae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001eb2:	d824      	bhi.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001eb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001eb8:	d008      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001eba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ebe:	d81e      	bhi.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00a      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ec8:	d010      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001eca:	e018      	b.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ecc:	4b62      	ldr	r3, [pc, #392]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	4a61      	ldr	r2, [pc, #388]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ed8:	e015      	b.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3304      	adds	r3, #4
 8001ede:	2100      	movs	r1, #0
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f000 fa73 	bl	80023cc <RCCEx_PLLSAI1_Config>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001eea:	e00c      	b.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3320      	adds	r3, #32
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 fb5e 	bl	80025b4 <RCCEx_PLLSAI2_Config>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001efc:	e003      	b.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	74fb      	strb	r3, [r7, #19]
      break;
 8001f02:	e000      	b.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f06:	7cfb      	ldrb	r3, [r7, #19]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10b      	bne.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f0c:	4b52      	ldr	r3, [pc, #328]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f12:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f1a:	494f      	ldr	r1, [pc, #316]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f22:	e001      	b.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f24:	7cfb      	ldrb	r3, [r7, #19]
 8001f26:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 80a0 	beq.w	8002076 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f36:	2300      	movs	r3, #0
 8001f38:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f3a:	4b47      	ldr	r3, [pc, #284]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00d      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f50:	4b41      	ldr	r3, [pc, #260]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f54:	4a40      	ldr	r2, [pc, #256]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f5c:	4b3e      	ldr	r3, [pc, #248]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f6c:	4b3b      	ldr	r3, [pc, #236]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a3a      	ldr	r2, [pc, #232]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f78:	f7fe fdba 	bl	8000af0 <HAL_GetTick>
 8001f7c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f7e:	e009      	b.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f80:	f7fe fdb6 	bl	8000af0 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d902      	bls.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	74fb      	strb	r3, [r7, #19]
        break;
 8001f92:	e005      	b.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f94:	4b31      	ldr	r3, [pc, #196]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0ef      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001fa0:	7cfb      	ldrb	r3, [r7, #19]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d15c      	bne.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fa6:	4b2c      	ldr	r3, [pc, #176]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fb0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d01f      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d019      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fc4:	4b24      	ldr	r3, [pc, #144]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fd0:	4b21      	ldr	r3, [pc, #132]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd6:	4a20      	ldr	r2, [pc, #128]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fe0:	4b1d      	ldr	r3, [pc, #116]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe6:	4a1c      	ldr	r2, [pc, #112]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ff0:	4a19      	ldr	r2, [pc, #100]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d016      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002002:	f7fe fd75 	bl	8000af0 <HAL_GetTick>
 8002006:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002008:	e00b      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200a:	f7fe fd71 	bl	8000af0 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	f241 3288 	movw	r2, #5000	; 0x1388
 8002018:	4293      	cmp	r3, r2
 800201a:	d902      	bls.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	74fb      	strb	r3, [r7, #19]
            break;
 8002020:	e006      	b.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002022:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0ec      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002030:	7cfb      	ldrb	r3, [r7, #19]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10c      	bne.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002036:	4b08      	ldr	r3, [pc, #32]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002046:	4904      	ldr	r1, [pc, #16]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002048:	4313      	orrs	r3, r2
 800204a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800204e:	e009      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002050:	7cfb      	ldrb	r3, [r7, #19]
 8002052:	74bb      	strb	r3, [r7, #18]
 8002054:	e006      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002056:	bf00      	nop
 8002058:	40021000 	.word	0x40021000
 800205c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002060:	7cfb      	ldrb	r3, [r7, #19]
 8002062:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002064:	7c7b      	ldrb	r3, [r7, #17]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d105      	bne.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800206a:	4b9e      	ldr	r3, [pc, #632]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206e:	4a9d      	ldr	r2, [pc, #628]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002074:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00a      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002082:	4b98      	ldr	r3, [pc, #608]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002088:	f023 0203 	bic.w	r2, r3, #3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002090:	4994      	ldr	r1, [pc, #592]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002092:	4313      	orrs	r3, r2
 8002094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00a      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020a4:	4b8f      	ldr	r3, [pc, #572]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020aa:	f023 020c 	bic.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b2:	498c      	ldr	r1, [pc, #560]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00a      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020c6:	4b87      	ldr	r3, [pc, #540]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	4983      	ldr	r1, [pc, #524]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00a      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020e8:	4b7e      	ldr	r3, [pc, #504]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	497b      	ldr	r1, [pc, #492]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0310 	and.w	r3, r3, #16
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00a      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800210a:	4b76      	ldr	r3, [pc, #472]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800210c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002110:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002118:	4972      	ldr	r1, [pc, #456]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211a:	4313      	orrs	r3, r2
 800211c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0320 	and.w	r3, r3, #32
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00a      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800212c:	4b6d      	ldr	r3, [pc, #436]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002132:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213a:	496a      	ldr	r1, [pc, #424]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00a      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800214e:	4b65      	ldr	r3, [pc, #404]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002154:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215c:	4961      	ldr	r1, [pc, #388]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215e:	4313      	orrs	r3, r2
 8002160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00a      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002170:	4b5c      	ldr	r3, [pc, #368]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002176:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800217e:	4959      	ldr	r1, [pc, #356]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002180:	4313      	orrs	r3, r2
 8002182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00a      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002192:	4b54      	ldr	r3, [pc, #336]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002198:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021a0:	4950      	ldr	r1, [pc, #320]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00a      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021b4:	4b4b      	ldr	r3, [pc, #300]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c2:	4948      	ldr	r1, [pc, #288]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00a      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021d6:	4b43      	ldr	r3, [pc, #268]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e4:	493f      	ldr	r1, [pc, #252]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d028      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021f8:	4b3a      	ldr	r3, [pc, #232]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002206:	4937      	ldr	r1, [pc, #220]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002208:	4313      	orrs	r3, r2
 800220a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002212:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002216:	d106      	bne.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002218:	4b32      	ldr	r3, [pc, #200]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4a31      	ldr	r2, [pc, #196]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002222:	60d3      	str	r3, [r2, #12]
 8002224:	e011      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800222a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800222e:	d10c      	bne.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3304      	adds	r3, #4
 8002234:	2101      	movs	r1, #1
 8002236:	4618      	mov	r0, r3
 8002238:	f000 f8c8 	bl	80023cc <RCCEx_PLLSAI1_Config>
 800223c:	4603      	mov	r3, r0
 800223e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002240:	7cfb      	ldrb	r3, [r7, #19]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002246:	7cfb      	ldrb	r3, [r7, #19]
 8002248:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d028      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002256:	4b23      	ldr	r3, [pc, #140]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002264:	491f      	ldr	r1, [pc, #124]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002266:	4313      	orrs	r3, r2
 8002268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002270:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002274:	d106      	bne.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002276:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	4a1a      	ldr	r2, [pc, #104]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002280:	60d3      	str	r3, [r2, #12]
 8002282:	e011      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002288:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800228c:	d10c      	bne.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3304      	adds	r3, #4
 8002292:	2101      	movs	r1, #1
 8002294:	4618      	mov	r0, r3
 8002296:	f000 f899 	bl	80023cc <RCCEx_PLLSAI1_Config>
 800229a:	4603      	mov	r3, r0
 800229c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800229e:	7cfb      	ldrb	r3, [r7, #19]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80022a4:	7cfb      	ldrb	r3, [r7, #19]
 80022a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d02b      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c2:	4908      	ldr	r1, [pc, #32]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022d2:	d109      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d4:	4b03      	ldr	r3, [pc, #12]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	4a02      	ldr	r2, [pc, #8]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022de:	60d3      	str	r3, [r2, #12]
 80022e0:	e014      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80022e2:	bf00      	nop
 80022e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022f0:	d10c      	bne.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3304      	adds	r3, #4
 80022f6:	2101      	movs	r1, #1
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 f867 	bl	80023cc <RCCEx_PLLSAI1_Config>
 80022fe:	4603      	mov	r3, r0
 8002300:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002302:	7cfb      	ldrb	r3, [r7, #19]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002308:	7cfb      	ldrb	r3, [r7, #19]
 800230a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d02f      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002318:	4b2b      	ldr	r3, [pc, #172]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002326:	4928      	ldr	r1, [pc, #160]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002332:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002336:	d10d      	bne.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3304      	adds	r3, #4
 800233c:	2102      	movs	r1, #2
 800233e:	4618      	mov	r0, r3
 8002340:	f000 f844 	bl	80023cc <RCCEx_PLLSAI1_Config>
 8002344:	4603      	mov	r3, r0
 8002346:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002348:	7cfb      	ldrb	r3, [r7, #19]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d014      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800234e:	7cfb      	ldrb	r3, [r7, #19]
 8002350:	74bb      	strb	r3, [r7, #18]
 8002352:	e011      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800235c:	d10c      	bne.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3320      	adds	r3, #32
 8002362:	2102      	movs	r1, #2
 8002364:	4618      	mov	r0, r3
 8002366:	f000 f925 	bl	80025b4 <RCCEx_PLLSAI2_Config>
 800236a:	4603      	mov	r3, r0
 800236c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800236e:	7cfb      	ldrb	r3, [r7, #19]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002374:	7cfb      	ldrb	r3, [r7, #19]
 8002376:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002384:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002392:	490d      	ldr	r1, [pc, #52]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00b      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023a6:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023b6:	4904      	ldr	r1, [pc, #16]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023be:	7cbb      	ldrb	r3, [r7, #18]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40021000 	.word	0x40021000

080023cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023da:	4b75      	ldr	r3, [pc, #468]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d018      	beq.n	8002418 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023e6:	4b72      	ldr	r3, [pc, #456]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f003 0203 	and.w	r2, r3, #3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d10d      	bne.n	8002412 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
       ||
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d009      	beq.n	8002412 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023fe:	4b6c      	ldr	r3, [pc, #432]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	091b      	lsrs	r3, r3, #4
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
       ||
 800240e:	429a      	cmp	r2, r3
 8002410:	d047      	beq.n	80024a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	73fb      	strb	r3, [r7, #15]
 8002416:	e044      	b.n	80024a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b03      	cmp	r3, #3
 800241e:	d018      	beq.n	8002452 <RCCEx_PLLSAI1_Config+0x86>
 8002420:	2b03      	cmp	r3, #3
 8002422:	d825      	bhi.n	8002470 <RCCEx_PLLSAI1_Config+0xa4>
 8002424:	2b01      	cmp	r3, #1
 8002426:	d002      	beq.n	800242e <RCCEx_PLLSAI1_Config+0x62>
 8002428:	2b02      	cmp	r3, #2
 800242a:	d009      	beq.n	8002440 <RCCEx_PLLSAI1_Config+0x74>
 800242c:	e020      	b.n	8002470 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800242e:	4b60      	ldr	r3, [pc, #384]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d11d      	bne.n	8002476 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800243e:	e01a      	b.n	8002476 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002440:	4b5b      	ldr	r3, [pc, #364]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002448:	2b00      	cmp	r3, #0
 800244a:	d116      	bne.n	800247a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002450:	e013      	b.n	800247a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002452:	4b57      	ldr	r3, [pc, #348]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10f      	bne.n	800247e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800245e:	4b54      	ldr	r3, [pc, #336]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d109      	bne.n	800247e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800246e:	e006      	b.n	800247e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
      break;
 8002474:	e004      	b.n	8002480 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002476:	bf00      	nop
 8002478:	e002      	b.n	8002480 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800247a:	bf00      	nop
 800247c:	e000      	b.n	8002480 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800247e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10d      	bne.n	80024a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002486:	4b4a      	ldr	r3, [pc, #296]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6819      	ldr	r1, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	3b01      	subs	r3, #1
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	430b      	orrs	r3, r1
 800249c:	4944      	ldr	r1, [pc, #272]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d17d      	bne.n	80025a4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024a8:	4b41      	ldr	r3, [pc, #260]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a40      	ldr	r2, [pc, #256]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024b4:	f7fe fb1c 	bl	8000af0 <HAL_GetTick>
 80024b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024ba:	e009      	b.n	80024d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024bc:	f7fe fb18 	bl	8000af0 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d902      	bls.n	80024d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	73fb      	strb	r3, [r7, #15]
        break;
 80024ce:	e005      	b.n	80024dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024d0:	4b37      	ldr	r3, [pc, #220]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1ef      	bne.n	80024bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d160      	bne.n	80025a4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d111      	bne.n	800250c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024e8:	4b31      	ldr	r3, [pc, #196]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80024f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6892      	ldr	r2, [r2, #8]
 80024f8:	0211      	lsls	r1, r2, #8
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68d2      	ldr	r2, [r2, #12]
 80024fe:	0912      	lsrs	r2, r2, #4
 8002500:	0452      	lsls	r2, r2, #17
 8002502:	430a      	orrs	r2, r1
 8002504:	492a      	ldr	r1, [pc, #168]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002506:	4313      	orrs	r3, r2
 8002508:	610b      	str	r3, [r1, #16]
 800250a:	e027      	b.n	800255c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d112      	bne.n	8002538 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002512:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800251a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6892      	ldr	r2, [r2, #8]
 8002522:	0211      	lsls	r1, r2, #8
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6912      	ldr	r2, [r2, #16]
 8002528:	0852      	lsrs	r2, r2, #1
 800252a:	3a01      	subs	r2, #1
 800252c:	0552      	lsls	r2, r2, #21
 800252e:	430a      	orrs	r2, r1
 8002530:	491f      	ldr	r1, [pc, #124]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002532:	4313      	orrs	r3, r2
 8002534:	610b      	str	r3, [r1, #16]
 8002536:	e011      	b.n	800255c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002538:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002540:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6892      	ldr	r2, [r2, #8]
 8002548:	0211      	lsls	r1, r2, #8
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6952      	ldr	r2, [r2, #20]
 800254e:	0852      	lsrs	r2, r2, #1
 8002550:	3a01      	subs	r2, #1
 8002552:	0652      	lsls	r2, r2, #25
 8002554:	430a      	orrs	r2, r1
 8002556:	4916      	ldr	r1, [pc, #88]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002558:	4313      	orrs	r3, r2
 800255a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800255c:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a13      	ldr	r2, [pc, #76]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002562:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002566:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002568:	f7fe fac2 	bl	8000af0 <HAL_GetTick>
 800256c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800256e:	e009      	b.n	8002584 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002570:	f7fe fabe 	bl	8000af0 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d902      	bls.n	8002584 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	73fb      	strb	r3, [r7, #15]
          break;
 8002582:	e005      	b.n	8002590 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002584:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0ef      	beq.n	8002570 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002590:	7bfb      	ldrb	r3, [r7, #15]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002598:	691a      	ldr	r2, [r3, #16]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	4904      	ldr	r1, [pc, #16]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40021000 	.word	0x40021000

080025b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025c2:	4b6a      	ldr	r3, [pc, #424]	; (800276c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d018      	beq.n	8002600 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80025ce:	4b67      	ldr	r3, [pc, #412]	; (800276c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f003 0203 	and.w	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d10d      	bne.n	80025fa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
       ||
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80025e6:	4b61      	ldr	r3, [pc, #388]	; (800276c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	091b      	lsrs	r3, r3, #4
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
       ||
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d047      	beq.n	800268a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	73fb      	strb	r3, [r7, #15]
 80025fe:	e044      	b.n	800268a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b03      	cmp	r3, #3
 8002606:	d018      	beq.n	800263a <RCCEx_PLLSAI2_Config+0x86>
 8002608:	2b03      	cmp	r3, #3
 800260a:	d825      	bhi.n	8002658 <RCCEx_PLLSAI2_Config+0xa4>
 800260c:	2b01      	cmp	r3, #1
 800260e:	d002      	beq.n	8002616 <RCCEx_PLLSAI2_Config+0x62>
 8002610:	2b02      	cmp	r3, #2
 8002612:	d009      	beq.n	8002628 <RCCEx_PLLSAI2_Config+0x74>
 8002614:	e020      	b.n	8002658 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002616:	4b55      	ldr	r3, [pc, #340]	; (800276c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d11d      	bne.n	800265e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002626:	e01a      	b.n	800265e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002628:	4b50      	ldr	r3, [pc, #320]	; (800276c <RCCEx_PLLSAI2_Config+0x1b8>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002630:	2b00      	cmp	r3, #0
 8002632:	d116      	bne.n	8002662 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002638:	e013      	b.n	8002662 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800263a:	4b4c      	ldr	r3, [pc, #304]	; (800276c <RCCEx_PLLSAI2_Config+0x1b8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10f      	bne.n	8002666 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002646:	4b49      	ldr	r3, [pc, #292]	; (800276c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d109      	bne.n	8002666 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002656:	e006      	b.n	8002666 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	73fb      	strb	r3, [r7, #15]
      break;
 800265c:	e004      	b.n	8002668 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800265e:	bf00      	nop
 8002660:	e002      	b.n	8002668 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002662:	bf00      	nop
 8002664:	e000      	b.n	8002668 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002666:	bf00      	nop
    }

    if(status == HAL_OK)
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10d      	bne.n	800268a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800266e:	4b3f      	ldr	r3, [pc, #252]	; (800276c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6819      	ldr	r1, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	3b01      	subs	r3, #1
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	430b      	orrs	r3, r1
 8002684:	4939      	ldr	r1, [pc, #228]	; (800276c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002686:	4313      	orrs	r3, r2
 8002688:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800268a:	7bfb      	ldrb	r3, [r7, #15]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d167      	bne.n	8002760 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002690:	4b36      	ldr	r3, [pc, #216]	; (800276c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a35      	ldr	r2, [pc, #212]	; (800276c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800269a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800269c:	f7fe fa28 	bl	8000af0 <HAL_GetTick>
 80026a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026a2:	e009      	b.n	80026b8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026a4:	f7fe fa24 	bl	8000af0 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d902      	bls.n	80026b8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	73fb      	strb	r3, [r7, #15]
        break;
 80026b6:	e005      	b.n	80026c4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026b8:	4b2c      	ldr	r3, [pc, #176]	; (800276c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1ef      	bne.n	80026a4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d14a      	bne.n	8002760 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d111      	bne.n	80026f4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026d0:	4b26      	ldr	r3, [pc, #152]	; (800276c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80026d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6892      	ldr	r2, [r2, #8]
 80026e0:	0211      	lsls	r1, r2, #8
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	68d2      	ldr	r2, [r2, #12]
 80026e6:	0912      	lsrs	r2, r2, #4
 80026e8:	0452      	lsls	r2, r2, #17
 80026ea:	430a      	orrs	r2, r1
 80026ec:	491f      	ldr	r1, [pc, #124]	; (800276c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	614b      	str	r3, [r1, #20]
 80026f2:	e011      	b.n	8002718 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026f4:	4b1d      	ldr	r3, [pc, #116]	; (800276c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6892      	ldr	r2, [r2, #8]
 8002704:	0211      	lsls	r1, r2, #8
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6912      	ldr	r2, [r2, #16]
 800270a:	0852      	lsrs	r2, r2, #1
 800270c:	3a01      	subs	r2, #1
 800270e:	0652      	lsls	r2, r2, #25
 8002710:	430a      	orrs	r2, r1
 8002712:	4916      	ldr	r1, [pc, #88]	; (800276c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002714:	4313      	orrs	r3, r2
 8002716:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002718:	4b14      	ldr	r3, [pc, #80]	; (800276c <RCCEx_PLLSAI2_Config+0x1b8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a13      	ldr	r2, [pc, #76]	; (800276c <RCCEx_PLLSAI2_Config+0x1b8>)
 800271e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002722:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002724:	f7fe f9e4 	bl	8000af0 <HAL_GetTick>
 8002728:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800272a:	e009      	b.n	8002740 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800272c:	f7fe f9e0 	bl	8000af0 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d902      	bls.n	8002740 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	73fb      	strb	r3, [r7, #15]
          break;
 800273e:	e005      	b.n	800274c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002740:	4b0a      	ldr	r3, [pc, #40]	; (800276c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0ef      	beq.n	800272c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d106      	bne.n	8002760 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002752:	4b06      	ldr	r3, [pc, #24]	; (800276c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002754:	695a      	ldr	r2, [r3, #20]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	4904      	ldr	r1, [pc, #16]	; (800276c <RCCEx_PLLSAI2_Config+0x1b8>)
 800275c:	4313      	orrs	r3, r2
 800275e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002760:	7bfb      	ldrb	r3, [r7, #15]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40021000 	.word	0x40021000

08002770 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e049      	b.n	8002816 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f841 	bl	800281e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3304      	adds	r3, #4
 80027ac:	4619      	mov	r1, r3
 80027ae:	4610      	mov	r0, r2
 80027b0:	f000 f9f8 	bl	8002ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
	...

08002834 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b01      	cmp	r3, #1
 8002846:	d001      	beq.n	800284c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e04f      	b.n	80028ec <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a23      	ldr	r2, [pc, #140]	; (80028f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d01d      	beq.n	80028aa <HAL_TIM_Base_Start_IT+0x76>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002876:	d018      	beq.n	80028aa <HAL_TIM_Base_Start_IT+0x76>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a1f      	ldr	r2, [pc, #124]	; (80028fc <HAL_TIM_Base_Start_IT+0xc8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d013      	beq.n	80028aa <HAL_TIM_Base_Start_IT+0x76>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a1e      	ldr	r2, [pc, #120]	; (8002900 <HAL_TIM_Base_Start_IT+0xcc>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d00e      	beq.n	80028aa <HAL_TIM_Base_Start_IT+0x76>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a1c      	ldr	r2, [pc, #112]	; (8002904 <HAL_TIM_Base_Start_IT+0xd0>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d009      	beq.n	80028aa <HAL_TIM_Base_Start_IT+0x76>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a1b      	ldr	r2, [pc, #108]	; (8002908 <HAL_TIM_Base_Start_IT+0xd4>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d004      	beq.n	80028aa <HAL_TIM_Base_Start_IT+0x76>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a19      	ldr	r2, [pc, #100]	; (800290c <HAL_TIM_Base_Start_IT+0xd8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d115      	bne.n	80028d6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	4b17      	ldr	r3, [pc, #92]	; (8002910 <HAL_TIM_Base_Start_IT+0xdc>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2b06      	cmp	r3, #6
 80028ba:	d015      	beq.n	80028e8 <HAL_TIM_Base_Start_IT+0xb4>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c2:	d011      	beq.n	80028e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0201 	orr.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d4:	e008      	b.n	80028e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f042 0201 	orr.w	r2, r2, #1
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	e000      	b.n	80028ea <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	40012c00 	.word	0x40012c00
 80028fc:	40000400 	.word	0x40000400
 8002900:	40000800 	.word	0x40000800
 8002904:	40000c00 	.word	0x40000c00
 8002908:	40013400 	.word	0x40013400
 800290c:	40014000 	.word	0x40014000
 8002910:	00010007 	.word	0x00010007

08002914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b02      	cmp	r3, #2
 8002928:	d122      	bne.n	8002970 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b02      	cmp	r3, #2
 8002936:	d11b      	bne.n	8002970 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0202 	mvn.w	r2, #2
 8002940:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f905 	bl	8002b66 <HAL_TIM_IC_CaptureCallback>
 800295c:	e005      	b.n	800296a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f8f7 	bl	8002b52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f908 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b04      	cmp	r3, #4
 800297c:	d122      	bne.n	80029c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b04      	cmp	r3, #4
 800298a:	d11b      	bne.n	80029c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0204 	mvn.w	r2, #4
 8002994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2202      	movs	r2, #2
 800299a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f8db 	bl	8002b66 <HAL_TIM_IC_CaptureCallback>
 80029b0:	e005      	b.n	80029be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f8cd 	bl	8002b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f8de 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d122      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d11b      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0208 	mvn.w	r2, #8
 80029e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2204      	movs	r2, #4
 80029ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f8b1 	bl	8002b66 <HAL_TIM_IC_CaptureCallback>
 8002a04:	e005      	b.n	8002a12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f8a3 	bl	8002b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f8b4 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	2b10      	cmp	r3, #16
 8002a24:	d122      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	2b10      	cmp	r3, #16
 8002a32:	d11b      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0210 	mvn.w	r2, #16
 8002a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2208      	movs	r2, #8
 8002a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f887 	bl	8002b66 <HAL_TIM_IC_CaptureCallback>
 8002a58:	e005      	b.n	8002a66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f879 	bl	8002b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f88a 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d10e      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d107      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0201 	mvn.w	r2, #1
 8002a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7fd fe86 	bl	80007a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa2:	2b80      	cmp	r3, #128	; 0x80
 8002aa4:	d10e      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab0:	2b80      	cmp	r3, #128	; 0x80
 8002ab2:	d107      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f914 	bl	8002cec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad2:	d10e      	bne.n	8002af2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ade:	2b80      	cmp	r3, #128	; 0x80
 8002ae0:	d107      	bne.n	8002af2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f907 	bl	8002d00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afc:	2b40      	cmp	r3, #64	; 0x40
 8002afe:	d10e      	bne.n	8002b1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0a:	2b40      	cmp	r3, #64	; 0x40
 8002b0c:	d107      	bne.n	8002b1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f838 	bl	8002b8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f003 0320 	and.w	r3, r3, #32
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	d10e      	bne.n	8002b4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	2b20      	cmp	r3, #32
 8002b38:	d107      	bne.n	8002b4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f06f 0220 	mvn.w	r2, #32
 8002b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f8c7 	bl	8002cd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a40      	ldr	r2, [pc, #256]	; (8002cb8 <TIM_Base_SetConfig+0x114>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d013      	beq.n	8002be4 <TIM_Base_SetConfig+0x40>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc2:	d00f      	beq.n	8002be4 <TIM_Base_SetConfig+0x40>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a3d      	ldr	r2, [pc, #244]	; (8002cbc <TIM_Base_SetConfig+0x118>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d00b      	beq.n	8002be4 <TIM_Base_SetConfig+0x40>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a3c      	ldr	r2, [pc, #240]	; (8002cc0 <TIM_Base_SetConfig+0x11c>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d007      	beq.n	8002be4 <TIM_Base_SetConfig+0x40>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a3b      	ldr	r2, [pc, #236]	; (8002cc4 <TIM_Base_SetConfig+0x120>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d003      	beq.n	8002be4 <TIM_Base_SetConfig+0x40>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a3a      	ldr	r2, [pc, #232]	; (8002cc8 <TIM_Base_SetConfig+0x124>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d108      	bne.n	8002bf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a2f      	ldr	r2, [pc, #188]	; (8002cb8 <TIM_Base_SetConfig+0x114>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d01f      	beq.n	8002c3e <TIM_Base_SetConfig+0x9a>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c04:	d01b      	beq.n	8002c3e <TIM_Base_SetConfig+0x9a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a2c      	ldr	r2, [pc, #176]	; (8002cbc <TIM_Base_SetConfig+0x118>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d017      	beq.n	8002c3e <TIM_Base_SetConfig+0x9a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a2b      	ldr	r2, [pc, #172]	; (8002cc0 <TIM_Base_SetConfig+0x11c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d013      	beq.n	8002c3e <TIM_Base_SetConfig+0x9a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a2a      	ldr	r2, [pc, #168]	; (8002cc4 <TIM_Base_SetConfig+0x120>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d00f      	beq.n	8002c3e <TIM_Base_SetConfig+0x9a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a29      	ldr	r2, [pc, #164]	; (8002cc8 <TIM_Base_SetConfig+0x124>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d00b      	beq.n	8002c3e <TIM_Base_SetConfig+0x9a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a28      	ldr	r2, [pc, #160]	; (8002ccc <TIM_Base_SetConfig+0x128>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d007      	beq.n	8002c3e <TIM_Base_SetConfig+0x9a>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a27      	ldr	r2, [pc, #156]	; (8002cd0 <TIM_Base_SetConfig+0x12c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d003      	beq.n	8002c3e <TIM_Base_SetConfig+0x9a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a26      	ldr	r2, [pc, #152]	; (8002cd4 <TIM_Base_SetConfig+0x130>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d108      	bne.n	8002c50 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a10      	ldr	r2, [pc, #64]	; (8002cb8 <TIM_Base_SetConfig+0x114>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d00f      	beq.n	8002c9c <TIM_Base_SetConfig+0xf8>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a12      	ldr	r2, [pc, #72]	; (8002cc8 <TIM_Base_SetConfig+0x124>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d00b      	beq.n	8002c9c <TIM_Base_SetConfig+0xf8>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a11      	ldr	r2, [pc, #68]	; (8002ccc <TIM_Base_SetConfig+0x128>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d007      	beq.n	8002c9c <TIM_Base_SetConfig+0xf8>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a10      	ldr	r2, [pc, #64]	; (8002cd0 <TIM_Base_SetConfig+0x12c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d003      	beq.n	8002c9c <TIM_Base_SetConfig+0xf8>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a0f      	ldr	r2, [pc, #60]	; (8002cd4 <TIM_Base_SetConfig+0x130>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d103      	bne.n	8002ca4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	615a      	str	r2, [r3, #20]
}
 8002caa:	bf00      	nop
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40012c00 	.word	0x40012c00
 8002cbc:	40000400 	.word	0x40000400
 8002cc0:	40000800 	.word	0x40000800
 8002cc4:	40000c00 	.word	0x40000c00
 8002cc8:	40013400 	.word	0x40013400
 8002ccc:	40014000 	.word	0x40014000
 8002cd0:	40014400 	.word	0x40014400
 8002cd4:	40014800 	.word	0x40014800

08002cd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e040      	b.n	8002da8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fd fd74 	bl	8000824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2224      	movs	r2, #36	; 0x24
 8002d40:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0201 	bic.w	r2, r2, #1
 8002d50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f8c0 	bl	8002ed8 <UART_SetConfig>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e022      	b.n	8002da8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fb6c 	bl	8003448 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0201 	orr.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 fbf3 	bl	800358c <UART_CheckIdleState>
 8002da6:	4603      	mov	r3, r0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08a      	sub	sp, #40	; 0x28
 8002db4:	af02      	add	r7, sp, #8
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	603b      	str	r3, [r7, #0]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dc4:	2b20      	cmp	r3, #32
 8002dc6:	f040 8082 	bne.w	8002ece <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <HAL_UART_Transmit+0x26>
 8002dd0:	88fb      	ldrh	r3, [r7, #6]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e07a      	b.n	8002ed0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_UART_Transmit+0x38>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e073      	b.n	8002ed0 <HAL_UART_Transmit+0x120>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2221      	movs	r2, #33	; 0x21
 8002dfc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dfe:	f7fd fe77 	bl	8000af0 <HAL_GetTick>
 8002e02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	88fa      	ldrh	r2, [r7, #6]
 8002e08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	88fa      	ldrh	r2, [r7, #6]
 8002e10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e1c:	d108      	bne.n	8002e30 <HAL_UART_Transmit+0x80>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d104      	bne.n	8002e30 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	61bb      	str	r3, [r7, #24]
 8002e2e:	e003      	b.n	8002e38 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002e40:	e02d      	b.n	8002e9e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2180      	movs	r1, #128	; 0x80
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 fbe6 	bl	800361e <UART_WaitOnFlagUntilTimeout>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e039      	b.n	8002ed0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10b      	bne.n	8002e7a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	881a      	ldrh	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e6e:	b292      	uxth	r2, r2
 8002e70:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	3302      	adds	r3, #2
 8002e76:	61bb      	str	r3, [r7, #24]
 8002e78:	e008      	b.n	8002e8c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	781a      	ldrb	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	b292      	uxth	r2, r2
 8002e84:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1cb      	bne.n	8002e42 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2140      	movs	r1, #64	; 0x40
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 fbb2 	bl	800361e <UART_WaitOnFlagUntilTimeout>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e005      	b.n	8002ed0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e000      	b.n	8002ed0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002ece:	2302      	movs	r3, #2
  }
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3720      	adds	r7, #32
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002edc:	b08a      	sub	sp, #40	; 0x28
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	4ba4      	ldr	r3, [pc, #656]	; (8003198 <UART_SetConfig+0x2c0>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	6812      	ldr	r2, [r2, #0]
 8002f0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f10:	430b      	orrs	r3, r1
 8002f12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a99      	ldr	r2, [pc, #612]	; (800319c <UART_SetConfig+0x2c4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d004      	beq.n	8002f44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f40:	4313      	orrs	r3, r2
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f54:	430a      	orrs	r2, r1
 8002f56:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a90      	ldr	r2, [pc, #576]	; (80031a0 <UART_SetConfig+0x2c8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d126      	bne.n	8002fb0 <UART_SetConfig+0xd8>
 8002f62:	4b90      	ldr	r3, [pc, #576]	; (80031a4 <UART_SetConfig+0x2cc>)
 8002f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d81b      	bhi.n	8002fa8 <UART_SetConfig+0xd0>
 8002f70:	a201      	add	r2, pc, #4	; (adr r2, 8002f78 <UART_SetConfig+0xa0>)
 8002f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f76:	bf00      	nop
 8002f78:	08002f89 	.word	0x08002f89
 8002f7c:	08002f99 	.word	0x08002f99
 8002f80:	08002f91 	.word	0x08002f91
 8002f84:	08002fa1 	.word	0x08002fa1
 8002f88:	2301      	movs	r3, #1
 8002f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f8e:	e116      	b.n	80031be <UART_SetConfig+0x2e6>
 8002f90:	2302      	movs	r3, #2
 8002f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f96:	e112      	b.n	80031be <UART_SetConfig+0x2e6>
 8002f98:	2304      	movs	r3, #4
 8002f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f9e:	e10e      	b.n	80031be <UART_SetConfig+0x2e6>
 8002fa0:	2308      	movs	r3, #8
 8002fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fa6:	e10a      	b.n	80031be <UART_SetConfig+0x2e6>
 8002fa8:	2310      	movs	r3, #16
 8002faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fae:	e106      	b.n	80031be <UART_SetConfig+0x2e6>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a7c      	ldr	r2, [pc, #496]	; (80031a8 <UART_SetConfig+0x2d0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d138      	bne.n	800302c <UART_SetConfig+0x154>
 8002fba:	4b7a      	ldr	r3, [pc, #488]	; (80031a4 <UART_SetConfig+0x2cc>)
 8002fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc0:	f003 030c 	and.w	r3, r3, #12
 8002fc4:	2b0c      	cmp	r3, #12
 8002fc6:	d82d      	bhi.n	8003024 <UART_SetConfig+0x14c>
 8002fc8:	a201      	add	r2, pc, #4	; (adr r2, 8002fd0 <UART_SetConfig+0xf8>)
 8002fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fce:	bf00      	nop
 8002fd0:	08003005 	.word	0x08003005
 8002fd4:	08003025 	.word	0x08003025
 8002fd8:	08003025 	.word	0x08003025
 8002fdc:	08003025 	.word	0x08003025
 8002fe0:	08003015 	.word	0x08003015
 8002fe4:	08003025 	.word	0x08003025
 8002fe8:	08003025 	.word	0x08003025
 8002fec:	08003025 	.word	0x08003025
 8002ff0:	0800300d 	.word	0x0800300d
 8002ff4:	08003025 	.word	0x08003025
 8002ff8:	08003025 	.word	0x08003025
 8002ffc:	08003025 	.word	0x08003025
 8003000:	0800301d 	.word	0x0800301d
 8003004:	2300      	movs	r3, #0
 8003006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800300a:	e0d8      	b.n	80031be <UART_SetConfig+0x2e6>
 800300c:	2302      	movs	r3, #2
 800300e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003012:	e0d4      	b.n	80031be <UART_SetConfig+0x2e6>
 8003014:	2304      	movs	r3, #4
 8003016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800301a:	e0d0      	b.n	80031be <UART_SetConfig+0x2e6>
 800301c:	2308      	movs	r3, #8
 800301e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003022:	e0cc      	b.n	80031be <UART_SetConfig+0x2e6>
 8003024:	2310      	movs	r3, #16
 8003026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800302a:	e0c8      	b.n	80031be <UART_SetConfig+0x2e6>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a5e      	ldr	r2, [pc, #376]	; (80031ac <UART_SetConfig+0x2d4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d125      	bne.n	8003082 <UART_SetConfig+0x1aa>
 8003036:	4b5b      	ldr	r3, [pc, #364]	; (80031a4 <UART_SetConfig+0x2cc>)
 8003038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003040:	2b30      	cmp	r3, #48	; 0x30
 8003042:	d016      	beq.n	8003072 <UART_SetConfig+0x19a>
 8003044:	2b30      	cmp	r3, #48	; 0x30
 8003046:	d818      	bhi.n	800307a <UART_SetConfig+0x1a2>
 8003048:	2b20      	cmp	r3, #32
 800304a:	d00a      	beq.n	8003062 <UART_SetConfig+0x18a>
 800304c:	2b20      	cmp	r3, #32
 800304e:	d814      	bhi.n	800307a <UART_SetConfig+0x1a2>
 8003050:	2b00      	cmp	r3, #0
 8003052:	d002      	beq.n	800305a <UART_SetConfig+0x182>
 8003054:	2b10      	cmp	r3, #16
 8003056:	d008      	beq.n	800306a <UART_SetConfig+0x192>
 8003058:	e00f      	b.n	800307a <UART_SetConfig+0x1a2>
 800305a:	2300      	movs	r3, #0
 800305c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003060:	e0ad      	b.n	80031be <UART_SetConfig+0x2e6>
 8003062:	2302      	movs	r3, #2
 8003064:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003068:	e0a9      	b.n	80031be <UART_SetConfig+0x2e6>
 800306a:	2304      	movs	r3, #4
 800306c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003070:	e0a5      	b.n	80031be <UART_SetConfig+0x2e6>
 8003072:	2308      	movs	r3, #8
 8003074:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003078:	e0a1      	b.n	80031be <UART_SetConfig+0x2e6>
 800307a:	2310      	movs	r3, #16
 800307c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003080:	e09d      	b.n	80031be <UART_SetConfig+0x2e6>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a4a      	ldr	r2, [pc, #296]	; (80031b0 <UART_SetConfig+0x2d8>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d125      	bne.n	80030d8 <UART_SetConfig+0x200>
 800308c:	4b45      	ldr	r3, [pc, #276]	; (80031a4 <UART_SetConfig+0x2cc>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003092:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003096:	2bc0      	cmp	r3, #192	; 0xc0
 8003098:	d016      	beq.n	80030c8 <UART_SetConfig+0x1f0>
 800309a:	2bc0      	cmp	r3, #192	; 0xc0
 800309c:	d818      	bhi.n	80030d0 <UART_SetConfig+0x1f8>
 800309e:	2b80      	cmp	r3, #128	; 0x80
 80030a0:	d00a      	beq.n	80030b8 <UART_SetConfig+0x1e0>
 80030a2:	2b80      	cmp	r3, #128	; 0x80
 80030a4:	d814      	bhi.n	80030d0 <UART_SetConfig+0x1f8>
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <UART_SetConfig+0x1d8>
 80030aa:	2b40      	cmp	r3, #64	; 0x40
 80030ac:	d008      	beq.n	80030c0 <UART_SetConfig+0x1e8>
 80030ae:	e00f      	b.n	80030d0 <UART_SetConfig+0x1f8>
 80030b0:	2300      	movs	r3, #0
 80030b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030b6:	e082      	b.n	80031be <UART_SetConfig+0x2e6>
 80030b8:	2302      	movs	r3, #2
 80030ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030be:	e07e      	b.n	80031be <UART_SetConfig+0x2e6>
 80030c0:	2304      	movs	r3, #4
 80030c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030c6:	e07a      	b.n	80031be <UART_SetConfig+0x2e6>
 80030c8:	2308      	movs	r3, #8
 80030ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ce:	e076      	b.n	80031be <UART_SetConfig+0x2e6>
 80030d0:	2310      	movs	r3, #16
 80030d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030d6:	e072      	b.n	80031be <UART_SetConfig+0x2e6>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a35      	ldr	r2, [pc, #212]	; (80031b4 <UART_SetConfig+0x2dc>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d12a      	bne.n	8003138 <UART_SetConfig+0x260>
 80030e2:	4b30      	ldr	r3, [pc, #192]	; (80031a4 <UART_SetConfig+0x2cc>)
 80030e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030f0:	d01a      	beq.n	8003128 <UART_SetConfig+0x250>
 80030f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030f6:	d81b      	bhi.n	8003130 <UART_SetConfig+0x258>
 80030f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030fc:	d00c      	beq.n	8003118 <UART_SetConfig+0x240>
 80030fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003102:	d815      	bhi.n	8003130 <UART_SetConfig+0x258>
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <UART_SetConfig+0x238>
 8003108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800310c:	d008      	beq.n	8003120 <UART_SetConfig+0x248>
 800310e:	e00f      	b.n	8003130 <UART_SetConfig+0x258>
 8003110:	2300      	movs	r3, #0
 8003112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003116:	e052      	b.n	80031be <UART_SetConfig+0x2e6>
 8003118:	2302      	movs	r3, #2
 800311a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800311e:	e04e      	b.n	80031be <UART_SetConfig+0x2e6>
 8003120:	2304      	movs	r3, #4
 8003122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003126:	e04a      	b.n	80031be <UART_SetConfig+0x2e6>
 8003128:	2308      	movs	r3, #8
 800312a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800312e:	e046      	b.n	80031be <UART_SetConfig+0x2e6>
 8003130:	2310      	movs	r3, #16
 8003132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003136:	e042      	b.n	80031be <UART_SetConfig+0x2e6>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a17      	ldr	r2, [pc, #92]	; (800319c <UART_SetConfig+0x2c4>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d13a      	bne.n	80031b8 <UART_SetConfig+0x2e0>
 8003142:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <UART_SetConfig+0x2cc>)
 8003144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003148:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800314c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003150:	d01a      	beq.n	8003188 <UART_SetConfig+0x2b0>
 8003152:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003156:	d81b      	bhi.n	8003190 <UART_SetConfig+0x2b8>
 8003158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800315c:	d00c      	beq.n	8003178 <UART_SetConfig+0x2a0>
 800315e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003162:	d815      	bhi.n	8003190 <UART_SetConfig+0x2b8>
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <UART_SetConfig+0x298>
 8003168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800316c:	d008      	beq.n	8003180 <UART_SetConfig+0x2a8>
 800316e:	e00f      	b.n	8003190 <UART_SetConfig+0x2b8>
 8003170:	2300      	movs	r3, #0
 8003172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003176:	e022      	b.n	80031be <UART_SetConfig+0x2e6>
 8003178:	2302      	movs	r3, #2
 800317a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800317e:	e01e      	b.n	80031be <UART_SetConfig+0x2e6>
 8003180:	2304      	movs	r3, #4
 8003182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003186:	e01a      	b.n	80031be <UART_SetConfig+0x2e6>
 8003188:	2308      	movs	r3, #8
 800318a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800318e:	e016      	b.n	80031be <UART_SetConfig+0x2e6>
 8003190:	2310      	movs	r3, #16
 8003192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003196:	e012      	b.n	80031be <UART_SetConfig+0x2e6>
 8003198:	efff69f3 	.word	0xefff69f3
 800319c:	40008000 	.word	0x40008000
 80031a0:	40013800 	.word	0x40013800
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40004400 	.word	0x40004400
 80031ac:	40004800 	.word	0x40004800
 80031b0:	40004c00 	.word	0x40004c00
 80031b4:	40005000 	.word	0x40005000
 80031b8:	2310      	movs	r3, #16
 80031ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a9f      	ldr	r2, [pc, #636]	; (8003440 <UART_SetConfig+0x568>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d17a      	bne.n	80032be <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d824      	bhi.n	800321a <UART_SetConfig+0x342>
 80031d0:	a201      	add	r2, pc, #4	; (adr r2, 80031d8 <UART_SetConfig+0x300>)
 80031d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d6:	bf00      	nop
 80031d8:	080031fd 	.word	0x080031fd
 80031dc:	0800321b 	.word	0x0800321b
 80031e0:	08003205 	.word	0x08003205
 80031e4:	0800321b 	.word	0x0800321b
 80031e8:	0800320b 	.word	0x0800320b
 80031ec:	0800321b 	.word	0x0800321b
 80031f0:	0800321b 	.word	0x0800321b
 80031f4:	0800321b 	.word	0x0800321b
 80031f8:	08003213 	.word	0x08003213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031fc:	f7fe fd3e 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 8003200:	61f8      	str	r0, [r7, #28]
        break;
 8003202:	e010      	b.n	8003226 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003204:	4b8f      	ldr	r3, [pc, #572]	; (8003444 <UART_SetConfig+0x56c>)
 8003206:	61fb      	str	r3, [r7, #28]
        break;
 8003208:	e00d      	b.n	8003226 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800320a:	f7fe fc9f 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 800320e:	61f8      	str	r0, [r7, #28]
        break;
 8003210:	e009      	b.n	8003226 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003216:	61fb      	str	r3, [r7, #28]
        break;
 8003218:	e005      	b.n	8003226 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003224:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 80fb 	beq.w	8003424 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	4413      	add	r3, r2
 8003238:	69fa      	ldr	r2, [r7, #28]
 800323a:	429a      	cmp	r2, r3
 800323c:	d305      	bcc.n	800324a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003244:	69fa      	ldr	r2, [r7, #28]
 8003246:	429a      	cmp	r2, r3
 8003248:	d903      	bls.n	8003252 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003250:	e0e8      	b.n	8003424 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	2200      	movs	r2, #0
 8003256:	461c      	mov	r4, r3
 8003258:	4615      	mov	r5, r2
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	022b      	lsls	r3, r5, #8
 8003264:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003268:	0222      	lsls	r2, r4, #8
 800326a:	68f9      	ldr	r1, [r7, #12]
 800326c:	6849      	ldr	r1, [r1, #4]
 800326e:	0849      	lsrs	r1, r1, #1
 8003270:	2000      	movs	r0, #0
 8003272:	4688      	mov	r8, r1
 8003274:	4681      	mov	r9, r0
 8003276:	eb12 0a08 	adds.w	sl, r2, r8
 800327a:	eb43 0b09 	adc.w	fp, r3, r9
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	603b      	str	r3, [r7, #0]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800328c:	4650      	mov	r0, sl
 800328e:	4659      	mov	r1, fp
 8003290:	f7fc ff9e 	bl	80001d0 <__aeabi_uldivmod>
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	4613      	mov	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032a2:	d308      	bcc.n	80032b6 <UART_SetConfig+0x3de>
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032aa:	d204      	bcs.n	80032b6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	60da      	str	r2, [r3, #12]
 80032b4:	e0b6      	b.n	8003424 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80032bc:	e0b2      	b.n	8003424 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c6:	d15e      	bne.n	8003386 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80032c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d828      	bhi.n	8003322 <UART_SetConfig+0x44a>
 80032d0:	a201      	add	r2, pc, #4	; (adr r2, 80032d8 <UART_SetConfig+0x400>)
 80032d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d6:	bf00      	nop
 80032d8:	080032fd 	.word	0x080032fd
 80032dc:	08003305 	.word	0x08003305
 80032e0:	0800330d 	.word	0x0800330d
 80032e4:	08003323 	.word	0x08003323
 80032e8:	08003313 	.word	0x08003313
 80032ec:	08003323 	.word	0x08003323
 80032f0:	08003323 	.word	0x08003323
 80032f4:	08003323 	.word	0x08003323
 80032f8:	0800331b 	.word	0x0800331b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032fc:	f7fe fcbe 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 8003300:	61f8      	str	r0, [r7, #28]
        break;
 8003302:	e014      	b.n	800332e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003304:	f7fe fcd0 	bl	8001ca8 <HAL_RCC_GetPCLK2Freq>
 8003308:	61f8      	str	r0, [r7, #28]
        break;
 800330a:	e010      	b.n	800332e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800330c:	4b4d      	ldr	r3, [pc, #308]	; (8003444 <UART_SetConfig+0x56c>)
 800330e:	61fb      	str	r3, [r7, #28]
        break;
 8003310:	e00d      	b.n	800332e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003312:	f7fe fc1b 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 8003316:	61f8      	str	r0, [r7, #28]
        break;
 8003318:	e009      	b.n	800332e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800331a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800331e:	61fb      	str	r3, [r7, #28]
        break;
 8003320:	e005      	b.n	800332e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800332c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d077      	beq.n	8003424 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	005a      	lsls	r2, r3, #1
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	085b      	lsrs	r3, r3, #1
 800333e:	441a      	add	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	fbb2 f3f3 	udiv	r3, r2, r3
 8003348:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	2b0f      	cmp	r3, #15
 800334e:	d916      	bls.n	800337e <UART_SetConfig+0x4a6>
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003356:	d212      	bcs.n	800337e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	b29b      	uxth	r3, r3
 800335c:	f023 030f 	bic.w	r3, r3, #15
 8003360:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	085b      	lsrs	r3, r3, #1
 8003366:	b29b      	uxth	r3, r3
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	b29a      	uxth	r2, r3
 800336e:	8afb      	ldrh	r3, [r7, #22]
 8003370:	4313      	orrs	r3, r2
 8003372:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	8afa      	ldrh	r2, [r7, #22]
 800337a:	60da      	str	r2, [r3, #12]
 800337c:	e052      	b.n	8003424 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003384:	e04e      	b.n	8003424 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003386:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800338a:	2b08      	cmp	r3, #8
 800338c:	d827      	bhi.n	80033de <UART_SetConfig+0x506>
 800338e:	a201      	add	r2, pc, #4	; (adr r2, 8003394 <UART_SetConfig+0x4bc>)
 8003390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003394:	080033b9 	.word	0x080033b9
 8003398:	080033c1 	.word	0x080033c1
 800339c:	080033c9 	.word	0x080033c9
 80033a0:	080033df 	.word	0x080033df
 80033a4:	080033cf 	.word	0x080033cf
 80033a8:	080033df 	.word	0x080033df
 80033ac:	080033df 	.word	0x080033df
 80033b0:	080033df 	.word	0x080033df
 80033b4:	080033d7 	.word	0x080033d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033b8:	f7fe fc60 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 80033bc:	61f8      	str	r0, [r7, #28]
        break;
 80033be:	e014      	b.n	80033ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033c0:	f7fe fc72 	bl	8001ca8 <HAL_RCC_GetPCLK2Freq>
 80033c4:	61f8      	str	r0, [r7, #28]
        break;
 80033c6:	e010      	b.n	80033ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033c8:	4b1e      	ldr	r3, [pc, #120]	; (8003444 <UART_SetConfig+0x56c>)
 80033ca:	61fb      	str	r3, [r7, #28]
        break;
 80033cc:	e00d      	b.n	80033ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ce:	f7fe fbbd 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 80033d2:	61f8      	str	r0, [r7, #28]
        break;
 80033d4:	e009      	b.n	80033ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033da:	61fb      	str	r3, [r7, #28]
        break;
 80033dc:	e005      	b.n	80033ea <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80033e8:	bf00      	nop
    }

    if (pclk != 0U)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d019      	beq.n	8003424 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	085a      	lsrs	r2, r3, #1
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	441a      	add	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003402:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	2b0f      	cmp	r3, #15
 8003408:	d909      	bls.n	800341e <UART_SetConfig+0x546>
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003410:	d205      	bcs.n	800341e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	60da      	str	r2, [r3, #12]
 800341c:	e002      	b.n	8003424 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003430:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003434:	4618      	mov	r0, r3
 8003436:	3728      	adds	r7, #40	; 0x28
 8003438:	46bd      	mov	sp, r7
 800343a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800343e:	bf00      	nop
 8003440:	40008000 	.word	0x40008000
 8003444:	00f42400 	.word	0x00f42400

08003448 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00a      	beq.n	8003472 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00a      	beq.n	80034fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	f003 0320 	and.w	r3, r3, #32
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00a      	beq.n	800351c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003524:	2b00      	cmp	r3, #0
 8003526:	d01a      	beq.n	800355e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003546:	d10a      	bne.n	800355e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	605a      	str	r2, [r3, #4]
  }
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af02      	add	r7, sp, #8
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800359c:	f7fd faa8 	bl	8000af0 <HAL_GetTick>
 80035a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d10e      	bne.n	80035ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f82d 	bl	800361e <UART_WaitOnFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e023      	b.n	8003616 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d10e      	bne.n	80035fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f817 	bl	800361e <UART_WaitOnFlagUntilTimeout>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e00d      	b.n	8003616 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2220      	movs	r2, #32
 80035fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2220      	movs	r2, #32
 8003604:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b09c      	sub	sp, #112	; 0x70
 8003622:	af00      	add	r7, sp, #0
 8003624:	60f8      	str	r0, [r7, #12]
 8003626:	60b9      	str	r1, [r7, #8]
 8003628:	603b      	str	r3, [r7, #0]
 800362a:	4613      	mov	r3, r2
 800362c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800362e:	e0a5      	b.n	800377c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003630:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003636:	f000 80a1 	beq.w	800377c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800363a:	f7fd fa59 	bl	8000af0 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003646:	429a      	cmp	r2, r3
 8003648:	d302      	bcc.n	8003650 <UART_WaitOnFlagUntilTimeout+0x32>
 800364a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800364c:	2b00      	cmp	r3, #0
 800364e:	d13e      	bne.n	80036ce <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003658:	e853 3f00 	ldrex	r3, [r3]
 800365c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800365e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003660:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003664:	667b      	str	r3, [r7, #100]	; 0x64
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	461a      	mov	r2, r3
 800366c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800366e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003670:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003672:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003674:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003676:	e841 2300 	strex	r3, r2, [r1]
 800367a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800367c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1e6      	bne.n	8003650 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3308      	adds	r3, #8
 8003688:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800368c:	e853 3f00 	ldrex	r3, [r3]
 8003690:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003694:	f023 0301 	bic.w	r3, r3, #1
 8003698:	663b      	str	r3, [r7, #96]	; 0x60
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	3308      	adds	r3, #8
 80036a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80036a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80036a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036aa:	e841 2300 	strex	r3, r2, [r1]
 80036ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80036b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1e5      	bne.n	8003682 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2220      	movs	r2, #32
 80036ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2220      	movs	r2, #32
 80036c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e067      	b.n	800379e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d04f      	beq.n	800377c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ea:	d147      	bne.n	800377c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036f4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fe:	e853 3f00 	ldrex	r3, [r3]
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800370a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	461a      	mov	r2, r3
 8003712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003714:	637b      	str	r3, [r7, #52]	; 0x34
 8003716:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003718:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800371a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800371c:	e841 2300 	strex	r3, r2, [r1]
 8003720:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1e6      	bne.n	80036f6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3308      	adds	r3, #8
 800372e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	e853 3f00 	ldrex	r3, [r3]
 8003736:	613b      	str	r3, [r7, #16]
   return(result);
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f023 0301 	bic.w	r3, r3, #1
 800373e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3308      	adds	r3, #8
 8003746:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003748:	623a      	str	r2, [r7, #32]
 800374a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374c:	69f9      	ldr	r1, [r7, #28]
 800374e:	6a3a      	ldr	r2, [r7, #32]
 8003750:	e841 2300 	strex	r3, r2, [r1]
 8003754:	61bb      	str	r3, [r7, #24]
   return(result);
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1e5      	bne.n	8003728 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2220      	movs	r2, #32
 8003760:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2220      	movs	r2, #32
 8003766:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2220      	movs	r2, #32
 800376c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e010      	b.n	800379e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69da      	ldr	r2, [r3, #28]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	4013      	ands	r3, r2
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	429a      	cmp	r2, r3
 800378a:	bf0c      	ite	eq
 800378c:	2301      	moveq	r3, #1
 800378e:	2300      	movne	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	461a      	mov	r2, r3
 8003794:	79fb      	ldrb	r3, [r7, #7]
 8003796:	429a      	cmp	r2, r3
 8003798:	f43f af4a 	beq.w	8003630 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3770      	adds	r7, #112	; 0x70
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b085      	sub	sp, #20
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	4603      	mov	r3, r0
 80037ae:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80037b0:	2300      	movs	r3, #0
 80037b2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80037b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037b8:	2b84      	cmp	r3, #132	; 0x84
 80037ba:	d005      	beq.n	80037c8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80037bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4413      	add	r3, r2
 80037c4:	3303      	adds	r3, #3
 80037c6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80037c8:	68fb      	ldr	r3, [r7, #12]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80037da:	f000 faf5 	bl	8003dc8 <vTaskStartScheduler>
  
  return osOK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80037e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037e6:	b089      	sub	sp, #36	; 0x24
 80037e8:	af04      	add	r7, sp, #16
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d020      	beq.n	8003838 <osThreadCreate+0x54>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d01c      	beq.n	8003838 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685c      	ldr	r4, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681d      	ldr	r5, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691e      	ldr	r6, [r3, #16]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff ffc8 	bl	80037a6 <makeFreeRtosPriority>
 8003816:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003820:	9202      	str	r2, [sp, #8]
 8003822:	9301      	str	r3, [sp, #4]
 8003824:	9100      	str	r1, [sp, #0]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	4632      	mov	r2, r6
 800382a:	4629      	mov	r1, r5
 800382c:	4620      	mov	r0, r4
 800382e:	f000 f8ed 	bl	8003a0c <xTaskCreateStatic>
 8003832:	4603      	mov	r3, r0
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	e01c      	b.n	8003872 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685c      	ldr	r4, [r3, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003844:	b29e      	uxth	r6, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff ffaa 	bl	80037a6 <makeFreeRtosPriority>
 8003852:	4602      	mov	r2, r0
 8003854:	f107 030c 	add.w	r3, r7, #12
 8003858:	9301      	str	r3, [sp, #4]
 800385a:	9200      	str	r2, [sp, #0]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	4632      	mov	r2, r6
 8003860:	4629      	mov	r1, r5
 8003862:	4620      	mov	r0, r4
 8003864:	f000 f92f 	bl	8003ac6 <xTaskCreate>
 8003868:	4603      	mov	r3, r0
 800386a:	2b01      	cmp	r3, #1
 800386c:	d001      	beq.n	8003872 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800386e:	2300      	movs	r3, #0
 8003870:	e000      	b.n	8003874 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003872:	68fb      	ldr	r3, [r7, #12]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800387c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <osDelay+0x16>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	e000      	b.n	8003894 <osDelay+0x18>
 8003892:	2301      	movs	r3, #1
 8003894:	4618      	mov	r0, r3
 8003896:	f000 fa63 	bl	8003d60 <vTaskDelay>
  
  return osOK;
 800389a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f103 0208 	add.w	r2, r3, #8
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f04f 32ff 	mov.w	r2, #4294967295
 80038bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f103 0208 	add.w	r2, r3, #8
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f103 0208 	add.w	r2, r3, #8
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038fe:	b480      	push	{r7}
 8003900:	b085      	sub	sp, #20
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	601a      	str	r2, [r3, #0]
}
 800393a:	bf00      	nop
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003946:	b480      	push	{r7}
 8003948:	b085      	sub	sp, #20
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395c:	d103      	bne.n	8003966 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	e00c      	b.n	8003980 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3308      	adds	r3, #8
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	e002      	b.n	8003974 <vListInsert+0x2e>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	429a      	cmp	r2, r3
 800397e:	d2f6      	bcs.n	800396e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	601a      	str	r2, [r3, #0]
}
 80039ac:	bf00      	nop
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6892      	ldr	r2, [r2, #8]
 80039ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6852      	ldr	r2, [r2, #4]
 80039d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d103      	bne.n	80039ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	1e5a      	subs	r2, r3, #1
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08e      	sub	sp, #56	; 0x38
 8003a10:	af04      	add	r7, sp, #16
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
 8003a18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10a      	bne.n	8003a36 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003a32:	bf00      	nop
 8003a34:	e7fe      	b.n	8003a34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10a      	bne.n	8003a52 <xTaskCreateStatic+0x46>
	__asm volatile
 8003a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a40:	f383 8811 	msr	BASEPRI, r3
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	61fb      	str	r3, [r7, #28]
}
 8003a4e:	bf00      	nop
 8003a50:	e7fe      	b.n	8003a50 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a52:	23b4      	movs	r3, #180	; 0xb4
 8003a54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2bb4      	cmp	r3, #180	; 0xb4
 8003a5a:	d00a      	beq.n	8003a72 <xTaskCreateStatic+0x66>
	__asm volatile
 8003a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a60:	f383 8811 	msr	BASEPRI, r3
 8003a64:	f3bf 8f6f 	isb	sy
 8003a68:	f3bf 8f4f 	dsb	sy
 8003a6c:	61bb      	str	r3, [r7, #24]
}
 8003a6e:	bf00      	nop
 8003a70:	e7fe      	b.n	8003a70 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a72:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d01e      	beq.n	8003ab8 <xTaskCreateStatic+0xac>
 8003a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d01b      	beq.n	8003ab8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a88:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a92:	2300      	movs	r3, #0
 8003a94:	9303      	str	r3, [sp, #12]
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	9302      	str	r3, [sp, #8]
 8003a9a:	f107 0314 	add.w	r3, r7, #20
 8003a9e:	9301      	str	r3, [sp, #4]
 8003aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	68b9      	ldr	r1, [r7, #8]
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 f850 	bl	8003b50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ab0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ab2:	f000 f8eb 	bl	8003c8c <prvAddNewTaskToReadyList>
 8003ab6:	e001      	b.n	8003abc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003abc:	697b      	ldr	r3, [r7, #20]
	}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3728      	adds	r7, #40	; 0x28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b08c      	sub	sp, #48	; 0x30
 8003aca:	af04      	add	r7, sp, #16
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	603b      	str	r3, [r7, #0]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ad6:	88fb      	ldrh	r3, [r7, #6]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fef4 	bl	80048c8 <pvPortMalloc>
 8003ae0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00e      	beq.n	8003b06 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ae8:	20b4      	movs	r0, #180	; 0xb4
 8003aea:	f000 feed 	bl	80048c8 <pvPortMalloc>
 8003aee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	631a      	str	r2, [r3, #48]	; 0x30
 8003afc:	e005      	b.n	8003b0a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003afe:	6978      	ldr	r0, [r7, #20]
 8003b00:	f000 ffae 	bl	8004a60 <vPortFree>
 8003b04:	e001      	b.n	8003b0a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d017      	beq.n	8003b40 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b18:	88fa      	ldrh	r2, [r7, #6]
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	9303      	str	r3, [sp, #12]
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	9302      	str	r3, [sp, #8]
 8003b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	68b9      	ldr	r1, [r7, #8]
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 f80e 	bl	8003b50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b34:	69f8      	ldr	r0, [r7, #28]
 8003b36:	f000 f8a9 	bl	8003c8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	e002      	b.n	8003b46 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b40:	f04f 33ff 	mov.w	r3, #4294967295
 8003b44:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b46:	69bb      	ldr	r3, [r7, #24]
	}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3720      	adds	r7, #32
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
 8003b5c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	f023 0307 	bic.w	r3, r3, #7
 8003b76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	617b      	str	r3, [r7, #20]
}
 8003b94:	bf00      	nop
 8003b96:	e7fe      	b.n	8003b96 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d01f      	beq.n	8003bde <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61fb      	str	r3, [r7, #28]
 8003ba2:	e012      	b.n	8003bca <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	4413      	add	r3, r2
 8003baa:	7819      	ldrb	r1, [r3, #0]
 8003bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	3334      	adds	r3, #52	; 0x34
 8003bb4:	460a      	mov	r2, r1
 8003bb6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d006      	beq.n	8003bd2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	61fb      	str	r3, [r7, #28]
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	2b0f      	cmp	r3, #15
 8003bce:	d9e9      	bls.n	8003ba4 <prvInitialiseNewTask+0x54>
 8003bd0:	e000      	b.n	8003bd4 <prvInitialiseNewTask+0x84>
			{
				break;
 8003bd2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bdc:	e003      	b.n	8003be6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be8:	2b06      	cmp	r3, #6
 8003bea:	d901      	bls.n	8003bf0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003bec:	2306      	movs	r3, #6
 8003bee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bf4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bfa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfe:	2200      	movs	r2, #0
 8003c00:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c04:	3304      	adds	r3, #4
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7ff fe6c 	bl	80038e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0e:	3318      	adds	r3, #24
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff fe67 	bl	80038e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1e:	f1c3 0207 	rsb	r2, r3, #7
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c2a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3e:	334c      	adds	r3, #76	; 0x4c
 8003c40:	2260      	movs	r2, #96	; 0x60
 8003c42:	2100      	movs	r1, #0
 8003c44:	4618      	mov	r0, r3
 8003c46:	f001 f84f 	bl	8004ce8 <memset>
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4c:	4a0c      	ldr	r2, [pc, #48]	; (8003c80 <prvInitialiseNewTask+0x130>)
 8003c4e:	651a      	str	r2, [r3, #80]	; 0x50
 8003c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c52:	4a0c      	ldr	r2, [pc, #48]	; (8003c84 <prvInitialiseNewTask+0x134>)
 8003c54:	655a      	str	r2, [r3, #84]	; 0x54
 8003c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c58:	4a0b      	ldr	r2, [pc, #44]	; (8003c88 <prvInitialiseNewTask+0x138>)
 8003c5a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	68f9      	ldr	r1, [r7, #12]
 8003c60:	69b8      	ldr	r0, [r7, #24]
 8003c62:	f000 fc1f 	bl	80044a4 <pxPortInitialiseStack>
 8003c66:	4602      	mov	r2, r0
 8003c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c76:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c78:	bf00      	nop
 8003c7a:	3720      	adds	r7, #32
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	08004f74 	.word	0x08004f74
 8003c84:	08004f94 	.word	0x08004f94
 8003c88:	08004f54 	.word	0x08004f54

08003c8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c94:	f000 fd36 	bl	8004704 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c98:	4b2a      	ldr	r3, [pc, #168]	; (8003d44 <prvAddNewTaskToReadyList+0xb8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	4a29      	ldr	r2, [pc, #164]	; (8003d44 <prvAddNewTaskToReadyList+0xb8>)
 8003ca0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ca2:	4b29      	ldr	r3, [pc, #164]	; (8003d48 <prvAddNewTaskToReadyList+0xbc>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d109      	bne.n	8003cbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003caa:	4a27      	ldr	r2, [pc, #156]	; (8003d48 <prvAddNewTaskToReadyList+0xbc>)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cb0:	4b24      	ldr	r3, [pc, #144]	; (8003d44 <prvAddNewTaskToReadyList+0xb8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d110      	bne.n	8003cda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003cb8:	f000 facc 	bl	8004254 <prvInitialiseTaskLists>
 8003cbc:	e00d      	b.n	8003cda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cbe:	4b23      	ldr	r3, [pc, #140]	; (8003d4c <prvAddNewTaskToReadyList+0xc0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d109      	bne.n	8003cda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cc6:	4b20      	ldr	r3, [pc, #128]	; (8003d48 <prvAddNewTaskToReadyList+0xbc>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d802      	bhi.n	8003cda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003cd4:	4a1c      	ldr	r2, [pc, #112]	; (8003d48 <prvAddNewTaskToReadyList+0xbc>)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003cda:	4b1d      	ldr	r3, [pc, #116]	; (8003d50 <prvAddNewTaskToReadyList+0xc4>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	4a1b      	ldr	r2, [pc, #108]	; (8003d50 <prvAddNewTaskToReadyList+0xc4>)
 8003ce2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	2201      	movs	r2, #1
 8003cea:	409a      	lsls	r2, r3
 8003cec:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <prvAddNewTaskToReadyList+0xc8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	4a18      	ldr	r2, [pc, #96]	; (8003d54 <prvAddNewTaskToReadyList+0xc8>)
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4a15      	ldr	r2, [pc, #84]	; (8003d58 <prvAddNewTaskToReadyList+0xcc>)
 8003d04:	441a      	add	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	f7ff fdf6 	bl	80038fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d12:	f000 fd27 	bl	8004764 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d16:	4b0d      	ldr	r3, [pc, #52]	; (8003d4c <prvAddNewTaskToReadyList+0xc0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00e      	beq.n	8003d3c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d1e:	4b0a      	ldr	r3, [pc, #40]	; (8003d48 <prvAddNewTaskToReadyList+0xbc>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d207      	bcs.n	8003d3c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d2c:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <prvAddNewTaskToReadyList+0xd0>)
 8003d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	f3bf 8f4f 	dsb	sy
 8003d38:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d3c:	bf00      	nop
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	20000520 	.word	0x20000520
 8003d48:	20000420 	.word	0x20000420
 8003d4c:	2000052c 	.word	0x2000052c
 8003d50:	2000053c 	.word	0x2000053c
 8003d54:	20000528 	.word	0x20000528
 8003d58:	20000424 	.word	0x20000424
 8003d5c:	e000ed04 	.word	0xe000ed04

08003d60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d017      	beq.n	8003da2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d72:	4b13      	ldr	r3, [pc, #76]	; (8003dc0 <vTaskDelay+0x60>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <vTaskDelay+0x30>
	__asm volatile
 8003d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7e:	f383 8811 	msr	BASEPRI, r3
 8003d82:	f3bf 8f6f 	isb	sy
 8003d86:	f3bf 8f4f 	dsb	sy
 8003d8a:	60bb      	str	r3, [r7, #8]
}
 8003d8c:	bf00      	nop
 8003d8e:	e7fe      	b.n	8003d8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003d90:	f000 f884 	bl	8003e9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d94:	2100      	movs	r1, #0
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 fb1e 	bl	80043d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d9c:	f000 f88c 	bl	8003eb8 <xTaskResumeAll>
 8003da0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d107      	bne.n	8003db8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003da8:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <vTaskDelay+0x64>)
 8003daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003db8:	bf00      	nop
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	20000548 	.word	0x20000548
 8003dc4:	e000ed04 	.word	0xe000ed04

08003dc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08a      	sub	sp, #40	; 0x28
 8003dcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003dd6:	463a      	mov	r2, r7
 8003dd8:	1d39      	adds	r1, r7, #4
 8003dda:	f107 0308 	add.w	r3, r7, #8
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fc fb78 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003de4:	6839      	ldr	r1, [r7, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	9202      	str	r2, [sp, #8]
 8003dec:	9301      	str	r3, [sp, #4]
 8003dee:	2300      	movs	r3, #0
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	2300      	movs	r3, #0
 8003df4:	460a      	mov	r2, r1
 8003df6:	4921      	ldr	r1, [pc, #132]	; (8003e7c <vTaskStartScheduler+0xb4>)
 8003df8:	4821      	ldr	r0, [pc, #132]	; (8003e80 <vTaskStartScheduler+0xb8>)
 8003dfa:	f7ff fe07 	bl	8003a0c <xTaskCreateStatic>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	4a20      	ldr	r2, [pc, #128]	; (8003e84 <vTaskStartScheduler+0xbc>)
 8003e02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e04:	4b1f      	ldr	r3, [pc, #124]	; (8003e84 <vTaskStartScheduler+0xbc>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d002      	beq.n	8003e12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	e001      	b.n	8003e16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d11b      	bne.n	8003e54 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	613b      	str	r3, [r7, #16]
}
 8003e2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e30:	4b15      	ldr	r3, [pc, #84]	; (8003e88 <vTaskStartScheduler+0xc0>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	334c      	adds	r3, #76	; 0x4c
 8003e36:	4a15      	ldr	r2, [pc, #84]	; (8003e8c <vTaskStartScheduler+0xc4>)
 8003e38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e3a:	4b15      	ldr	r3, [pc, #84]	; (8003e90 <vTaskStartScheduler+0xc8>)
 8003e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e42:	4b14      	ldr	r3, [pc, #80]	; (8003e94 <vTaskStartScheduler+0xcc>)
 8003e44:	2201      	movs	r2, #1
 8003e46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e48:	4b13      	ldr	r3, [pc, #76]	; (8003e98 <vTaskStartScheduler+0xd0>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e4e:	f000 fbb7 	bl	80045c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e52:	e00e      	b.n	8003e72 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5a:	d10a      	bne.n	8003e72 <vTaskStartScheduler+0xaa>
	__asm volatile
 8003e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e60:	f383 8811 	msr	BASEPRI, r3
 8003e64:	f3bf 8f6f 	isb	sy
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	60fb      	str	r3, [r7, #12]
}
 8003e6e:	bf00      	nop
 8003e70:	e7fe      	b.n	8003e70 <vTaskStartScheduler+0xa8>
}
 8003e72:	bf00      	nop
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	08004f04 	.word	0x08004f04
 8003e80:	08004225 	.word	0x08004225
 8003e84:	20000544 	.word	0x20000544
 8003e88:	20000420 	.word	0x20000420
 8003e8c:	20000010 	.word	0x20000010
 8003e90:	20000540 	.word	0x20000540
 8003e94:	2000052c 	.word	0x2000052c
 8003e98:	20000524 	.word	0x20000524

08003e9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ea0:	4b04      	ldr	r3, [pc, #16]	; (8003eb4 <vTaskSuspendAll+0x18>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	4a03      	ldr	r2, [pc, #12]	; (8003eb4 <vTaskSuspendAll+0x18>)
 8003ea8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003eaa:	bf00      	nop
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	20000548 	.word	0x20000548

08003eb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ec6:	4b41      	ldr	r3, [pc, #260]	; (8003fcc <xTaskResumeAll+0x114>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10a      	bne.n	8003ee4 <xTaskResumeAll+0x2c>
	__asm volatile
 8003ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	603b      	str	r3, [r7, #0]
}
 8003ee0:	bf00      	nop
 8003ee2:	e7fe      	b.n	8003ee2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ee4:	f000 fc0e 	bl	8004704 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ee8:	4b38      	ldr	r3, [pc, #224]	; (8003fcc <xTaskResumeAll+0x114>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3b01      	subs	r3, #1
 8003eee:	4a37      	ldr	r2, [pc, #220]	; (8003fcc <xTaskResumeAll+0x114>)
 8003ef0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ef2:	4b36      	ldr	r3, [pc, #216]	; (8003fcc <xTaskResumeAll+0x114>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d161      	bne.n	8003fbe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003efa:	4b35      	ldr	r3, [pc, #212]	; (8003fd0 <xTaskResumeAll+0x118>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d05d      	beq.n	8003fbe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f02:	e02e      	b.n	8003f62 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f04:	4b33      	ldr	r3, [pc, #204]	; (8003fd4 <xTaskResumeAll+0x11c>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3318      	adds	r3, #24
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff fd51 	bl	80039b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7ff fd4c 	bl	80039b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	2201      	movs	r2, #1
 8003f26:	409a      	lsls	r2, r3
 8003f28:	4b2b      	ldr	r3, [pc, #172]	; (8003fd8 <xTaskResumeAll+0x120>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	4a2a      	ldr	r2, [pc, #168]	; (8003fd8 <xTaskResumeAll+0x120>)
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f36:	4613      	mov	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4a27      	ldr	r2, [pc, #156]	; (8003fdc <xTaskResumeAll+0x124>)
 8003f40:	441a      	add	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	3304      	adds	r3, #4
 8003f46:	4619      	mov	r1, r3
 8003f48:	4610      	mov	r0, r2
 8003f4a:	f7ff fcd8 	bl	80038fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f52:	4b23      	ldr	r3, [pc, #140]	; (8003fe0 <xTaskResumeAll+0x128>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d302      	bcc.n	8003f62 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003f5c:	4b21      	ldr	r3, [pc, #132]	; (8003fe4 <xTaskResumeAll+0x12c>)
 8003f5e:	2201      	movs	r2, #1
 8003f60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f62:	4b1c      	ldr	r3, [pc, #112]	; (8003fd4 <xTaskResumeAll+0x11c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1cc      	bne.n	8003f04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f70:	f000 fa12 	bl	8004398 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f74:	4b1c      	ldr	r3, [pc, #112]	; (8003fe8 <xTaskResumeAll+0x130>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d010      	beq.n	8003fa2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f80:	f000 f836 	bl	8003ff0 <xTaskIncrementTick>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003f8a:	4b16      	ldr	r3, [pc, #88]	; (8003fe4 <xTaskResumeAll+0x12c>)
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1f1      	bne.n	8003f80 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003f9c:	4b12      	ldr	r3, [pc, #72]	; (8003fe8 <xTaskResumeAll+0x130>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003fa2:	4b10      	ldr	r3, [pc, #64]	; (8003fe4 <xTaskResumeAll+0x12c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d009      	beq.n	8003fbe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003faa:	2301      	movs	r3, #1
 8003fac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003fae:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <xTaskResumeAll+0x134>)
 8003fb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	f3bf 8f4f 	dsb	sy
 8003fba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fbe:	f000 fbd1 	bl	8004764 <vPortExitCritical>

	return xAlreadyYielded;
 8003fc2:	68bb      	ldr	r3, [r7, #8]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	20000548 	.word	0x20000548
 8003fd0:	20000520 	.word	0x20000520
 8003fd4:	200004e0 	.word	0x200004e0
 8003fd8:	20000528 	.word	0x20000528
 8003fdc:	20000424 	.word	0x20000424
 8003fe0:	20000420 	.word	0x20000420
 8003fe4:	20000534 	.word	0x20000534
 8003fe8:	20000530 	.word	0x20000530
 8003fec:	e000ed04 	.word	0xe000ed04

08003ff0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ffa:	4b4e      	ldr	r3, [pc, #312]	; (8004134 <xTaskIncrementTick+0x144>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f040 808e 	bne.w	8004120 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004004:	4b4c      	ldr	r3, [pc, #304]	; (8004138 <xTaskIncrementTick+0x148>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3301      	adds	r3, #1
 800400a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800400c:	4a4a      	ldr	r2, [pc, #296]	; (8004138 <xTaskIncrementTick+0x148>)
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d120      	bne.n	800405a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004018:	4b48      	ldr	r3, [pc, #288]	; (800413c <xTaskIncrementTick+0x14c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <xTaskIncrementTick+0x48>
	__asm volatile
 8004022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004026:	f383 8811 	msr	BASEPRI, r3
 800402a:	f3bf 8f6f 	isb	sy
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	603b      	str	r3, [r7, #0]
}
 8004034:	bf00      	nop
 8004036:	e7fe      	b.n	8004036 <xTaskIncrementTick+0x46>
 8004038:	4b40      	ldr	r3, [pc, #256]	; (800413c <xTaskIncrementTick+0x14c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	4b40      	ldr	r3, [pc, #256]	; (8004140 <xTaskIncrementTick+0x150>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a3e      	ldr	r2, [pc, #248]	; (800413c <xTaskIncrementTick+0x14c>)
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	4a3e      	ldr	r2, [pc, #248]	; (8004140 <xTaskIncrementTick+0x150>)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6013      	str	r3, [r2, #0]
 800404c:	4b3d      	ldr	r3, [pc, #244]	; (8004144 <xTaskIncrementTick+0x154>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3301      	adds	r3, #1
 8004052:	4a3c      	ldr	r2, [pc, #240]	; (8004144 <xTaskIncrementTick+0x154>)
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	f000 f99f 	bl	8004398 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800405a:	4b3b      	ldr	r3, [pc, #236]	; (8004148 <xTaskIncrementTick+0x158>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	429a      	cmp	r2, r3
 8004062:	d348      	bcc.n	80040f6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004064:	4b35      	ldr	r3, [pc, #212]	; (800413c <xTaskIncrementTick+0x14c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d104      	bne.n	8004078 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800406e:	4b36      	ldr	r3, [pc, #216]	; (8004148 <xTaskIncrementTick+0x158>)
 8004070:	f04f 32ff 	mov.w	r2, #4294967295
 8004074:	601a      	str	r2, [r3, #0]
					break;
 8004076:	e03e      	b.n	80040f6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004078:	4b30      	ldr	r3, [pc, #192]	; (800413c <xTaskIncrementTick+0x14c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	429a      	cmp	r2, r3
 800408e:	d203      	bcs.n	8004098 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004090:	4a2d      	ldr	r2, [pc, #180]	; (8004148 <xTaskIncrementTick+0x158>)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004096:	e02e      	b.n	80040f6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	3304      	adds	r3, #4
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff fc8b 	bl	80039b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d004      	beq.n	80040b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	3318      	adds	r3, #24
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff fc82 	bl	80039b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b8:	2201      	movs	r2, #1
 80040ba:	409a      	lsls	r2, r3
 80040bc:	4b23      	ldr	r3, [pc, #140]	; (800414c <xTaskIncrementTick+0x15c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	4a22      	ldr	r2, [pc, #136]	; (800414c <xTaskIncrementTick+0x15c>)
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ca:	4613      	mov	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4a1f      	ldr	r2, [pc, #124]	; (8004150 <xTaskIncrementTick+0x160>)
 80040d4:	441a      	add	r2, r3
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	3304      	adds	r3, #4
 80040da:	4619      	mov	r1, r3
 80040dc:	4610      	mov	r0, r2
 80040de:	f7ff fc0e 	bl	80038fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e6:	4b1b      	ldr	r3, [pc, #108]	; (8004154 <xTaskIncrementTick+0x164>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d3b9      	bcc.n	8004064 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80040f0:	2301      	movs	r3, #1
 80040f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040f4:	e7b6      	b.n	8004064 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040f6:	4b17      	ldr	r3, [pc, #92]	; (8004154 <xTaskIncrementTick+0x164>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fc:	4914      	ldr	r1, [pc, #80]	; (8004150 <xTaskIncrementTick+0x160>)
 80040fe:	4613      	mov	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4413      	add	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	440b      	add	r3, r1
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d901      	bls.n	8004112 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800410e:	2301      	movs	r3, #1
 8004110:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004112:	4b11      	ldr	r3, [pc, #68]	; (8004158 <xTaskIncrementTick+0x168>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d007      	beq.n	800412a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800411a:	2301      	movs	r3, #1
 800411c:	617b      	str	r3, [r7, #20]
 800411e:	e004      	b.n	800412a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004120:	4b0e      	ldr	r3, [pc, #56]	; (800415c <xTaskIncrementTick+0x16c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3301      	adds	r3, #1
 8004126:	4a0d      	ldr	r2, [pc, #52]	; (800415c <xTaskIncrementTick+0x16c>)
 8004128:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800412a:	697b      	ldr	r3, [r7, #20]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	20000548 	.word	0x20000548
 8004138:	20000524 	.word	0x20000524
 800413c:	200004d8 	.word	0x200004d8
 8004140:	200004dc 	.word	0x200004dc
 8004144:	20000538 	.word	0x20000538
 8004148:	20000540 	.word	0x20000540
 800414c:	20000528 	.word	0x20000528
 8004150:	20000424 	.word	0x20000424
 8004154:	20000420 	.word	0x20000420
 8004158:	20000534 	.word	0x20000534
 800415c:	20000530 	.word	0x20000530

08004160 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004166:	4b29      	ldr	r3, [pc, #164]	; (800420c <vTaskSwitchContext+0xac>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800416e:	4b28      	ldr	r3, [pc, #160]	; (8004210 <vTaskSwitchContext+0xb0>)
 8004170:	2201      	movs	r2, #1
 8004172:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004174:	e044      	b.n	8004200 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004176:	4b26      	ldr	r3, [pc, #152]	; (8004210 <vTaskSwitchContext+0xb0>)
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800417c:	4b25      	ldr	r3, [pc, #148]	; (8004214 <vTaskSwitchContext+0xb4>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	fab3 f383 	clz	r3, r3
 8004188:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800418a:	7afb      	ldrb	r3, [r7, #11]
 800418c:	f1c3 031f 	rsb	r3, r3, #31
 8004190:	617b      	str	r3, [r7, #20]
 8004192:	4921      	ldr	r1, [pc, #132]	; (8004218 <vTaskSwitchContext+0xb8>)
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	440b      	add	r3, r1
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10a      	bne.n	80041bc <vTaskSwitchContext+0x5c>
	__asm volatile
 80041a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041aa:	f383 8811 	msr	BASEPRI, r3
 80041ae:	f3bf 8f6f 	isb	sy
 80041b2:	f3bf 8f4f 	dsb	sy
 80041b6:	607b      	str	r3, [r7, #4]
}
 80041b8:	bf00      	nop
 80041ba:	e7fe      	b.n	80041ba <vTaskSwitchContext+0x5a>
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4613      	mov	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4a14      	ldr	r2, [pc, #80]	; (8004218 <vTaskSwitchContext+0xb8>)
 80041c8:	4413      	add	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	605a      	str	r2, [r3, #4]
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	3308      	adds	r3, #8
 80041de:	429a      	cmp	r2, r3
 80041e0:	d104      	bne.n	80041ec <vTaskSwitchContext+0x8c>
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	605a      	str	r2, [r3, #4]
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	4a0a      	ldr	r2, [pc, #40]	; (800421c <vTaskSwitchContext+0xbc>)
 80041f4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80041f6:	4b09      	ldr	r3, [pc, #36]	; (800421c <vTaskSwitchContext+0xbc>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	334c      	adds	r3, #76	; 0x4c
 80041fc:	4a08      	ldr	r2, [pc, #32]	; (8004220 <vTaskSwitchContext+0xc0>)
 80041fe:	6013      	str	r3, [r2, #0]
}
 8004200:	bf00      	nop
 8004202:	371c      	adds	r7, #28
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	20000548 	.word	0x20000548
 8004210:	20000534 	.word	0x20000534
 8004214:	20000528 	.word	0x20000528
 8004218:	20000424 	.word	0x20000424
 800421c:	20000420 	.word	0x20000420
 8004220:	20000010 	.word	0x20000010

08004224 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800422c:	f000 f852 	bl	80042d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004230:	4b06      	ldr	r3, [pc, #24]	; (800424c <prvIdleTask+0x28>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d9f9      	bls.n	800422c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004238:	4b05      	ldr	r3, [pc, #20]	; (8004250 <prvIdleTask+0x2c>)
 800423a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004248:	e7f0      	b.n	800422c <prvIdleTask+0x8>
 800424a:	bf00      	nop
 800424c:	20000424 	.word	0x20000424
 8004250:	e000ed04 	.word	0xe000ed04

08004254 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800425a:	2300      	movs	r3, #0
 800425c:	607b      	str	r3, [r7, #4]
 800425e:	e00c      	b.n	800427a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4a12      	ldr	r2, [pc, #72]	; (80042b4 <prvInitialiseTaskLists+0x60>)
 800426c:	4413      	add	r3, r2
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff fb18 	bl	80038a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3301      	adds	r3, #1
 8004278:	607b      	str	r3, [r7, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b06      	cmp	r3, #6
 800427e:	d9ef      	bls.n	8004260 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004280:	480d      	ldr	r0, [pc, #52]	; (80042b8 <prvInitialiseTaskLists+0x64>)
 8004282:	f7ff fb0f 	bl	80038a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004286:	480d      	ldr	r0, [pc, #52]	; (80042bc <prvInitialiseTaskLists+0x68>)
 8004288:	f7ff fb0c 	bl	80038a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800428c:	480c      	ldr	r0, [pc, #48]	; (80042c0 <prvInitialiseTaskLists+0x6c>)
 800428e:	f7ff fb09 	bl	80038a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004292:	480c      	ldr	r0, [pc, #48]	; (80042c4 <prvInitialiseTaskLists+0x70>)
 8004294:	f7ff fb06 	bl	80038a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004298:	480b      	ldr	r0, [pc, #44]	; (80042c8 <prvInitialiseTaskLists+0x74>)
 800429a:	f7ff fb03 	bl	80038a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800429e:	4b0b      	ldr	r3, [pc, #44]	; (80042cc <prvInitialiseTaskLists+0x78>)
 80042a0:	4a05      	ldr	r2, [pc, #20]	; (80042b8 <prvInitialiseTaskLists+0x64>)
 80042a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042a4:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <prvInitialiseTaskLists+0x7c>)
 80042a6:	4a05      	ldr	r2, [pc, #20]	; (80042bc <prvInitialiseTaskLists+0x68>)
 80042a8:	601a      	str	r2, [r3, #0]
}
 80042aa:	bf00      	nop
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	20000424 	.word	0x20000424
 80042b8:	200004b0 	.word	0x200004b0
 80042bc:	200004c4 	.word	0x200004c4
 80042c0:	200004e0 	.word	0x200004e0
 80042c4:	200004f4 	.word	0x200004f4
 80042c8:	2000050c 	.word	0x2000050c
 80042cc:	200004d8 	.word	0x200004d8
 80042d0:	200004dc 	.word	0x200004dc

080042d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042da:	e019      	b.n	8004310 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80042dc:	f000 fa12 	bl	8004704 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042e0:	4b10      	ldr	r3, [pc, #64]	; (8004324 <prvCheckTasksWaitingTermination+0x50>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3304      	adds	r3, #4
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff fb63 	bl	80039b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042f2:	4b0d      	ldr	r3, [pc, #52]	; (8004328 <prvCheckTasksWaitingTermination+0x54>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	4a0b      	ldr	r2, [pc, #44]	; (8004328 <prvCheckTasksWaitingTermination+0x54>)
 80042fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042fc:	4b0b      	ldr	r3, [pc, #44]	; (800432c <prvCheckTasksWaitingTermination+0x58>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3b01      	subs	r3, #1
 8004302:	4a0a      	ldr	r2, [pc, #40]	; (800432c <prvCheckTasksWaitingTermination+0x58>)
 8004304:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004306:	f000 fa2d 	bl	8004764 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f810 	bl	8004330 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004310:	4b06      	ldr	r3, [pc, #24]	; (800432c <prvCheckTasksWaitingTermination+0x58>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1e1      	bne.n	80042dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004318:	bf00      	nop
 800431a:	bf00      	nop
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	200004f4 	.word	0x200004f4
 8004328:	20000520 	.word	0x20000520
 800432c:	20000508 	.word	0x20000508

08004330 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	334c      	adds	r3, #76	; 0x4c
 800433c:	4618      	mov	r0, r3
 800433e:	f000 fce9 	bl	8004d14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004348:	2b00      	cmp	r3, #0
 800434a:	d108      	bne.n	800435e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004350:	4618      	mov	r0, r3
 8004352:	f000 fb85 	bl	8004a60 <vPortFree>
				vPortFree( pxTCB );
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fb82 	bl	8004a60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800435c:	e018      	b.n	8004390 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004364:	2b01      	cmp	r3, #1
 8004366:	d103      	bne.n	8004370 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 fb79 	bl	8004a60 <vPortFree>
	}
 800436e:	e00f      	b.n	8004390 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004376:	2b02      	cmp	r3, #2
 8004378:	d00a      	beq.n	8004390 <prvDeleteTCB+0x60>
	__asm volatile
 800437a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	60fb      	str	r3, [r7, #12]
}
 800438c:	bf00      	nop
 800438e:	e7fe      	b.n	800438e <prvDeleteTCB+0x5e>
	}
 8004390:	bf00      	nop
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800439e:	4b0c      	ldr	r3, [pc, #48]	; (80043d0 <prvResetNextTaskUnblockTime+0x38>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d104      	bne.n	80043b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80043a8:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <prvResetNextTaskUnblockTime+0x3c>)
 80043aa:	f04f 32ff 	mov.w	r2, #4294967295
 80043ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80043b0:	e008      	b.n	80043c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043b2:	4b07      	ldr	r3, [pc, #28]	; (80043d0 <prvResetNextTaskUnblockTime+0x38>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	4a04      	ldr	r2, [pc, #16]	; (80043d4 <prvResetNextTaskUnblockTime+0x3c>)
 80043c2:	6013      	str	r3, [r2, #0]
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	200004d8 	.word	0x200004d8
 80043d4:	20000540 	.word	0x20000540

080043d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80043e2:	4b29      	ldr	r3, [pc, #164]	; (8004488 <prvAddCurrentTaskToDelayedList+0xb0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043e8:	4b28      	ldr	r3, [pc, #160]	; (800448c <prvAddCurrentTaskToDelayedList+0xb4>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3304      	adds	r3, #4
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff fae2 	bl	80039b8 <uxListRemove>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10b      	bne.n	8004412 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80043fa:	4b24      	ldr	r3, [pc, #144]	; (800448c <prvAddCurrentTaskToDelayedList+0xb4>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	2201      	movs	r2, #1
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	43da      	mvns	r2, r3
 8004408:	4b21      	ldr	r3, [pc, #132]	; (8004490 <prvAddCurrentTaskToDelayedList+0xb8>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4013      	ands	r3, r2
 800440e:	4a20      	ldr	r2, [pc, #128]	; (8004490 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004410:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004418:	d10a      	bne.n	8004430 <prvAddCurrentTaskToDelayedList+0x58>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d007      	beq.n	8004430 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004420:	4b1a      	ldr	r3, [pc, #104]	; (800448c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3304      	adds	r3, #4
 8004426:	4619      	mov	r1, r3
 8004428:	481a      	ldr	r0, [pc, #104]	; (8004494 <prvAddCurrentTaskToDelayedList+0xbc>)
 800442a:	f7ff fa68 	bl	80038fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800442e:	e026      	b.n	800447e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4413      	add	r3, r2
 8004436:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004438:	4b14      	ldr	r3, [pc, #80]	; (800448c <prvAddCurrentTaskToDelayedList+0xb4>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	429a      	cmp	r2, r3
 8004446:	d209      	bcs.n	800445c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004448:	4b13      	ldr	r3, [pc, #76]	; (8004498 <prvAddCurrentTaskToDelayedList+0xc0>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	4b0f      	ldr	r3, [pc, #60]	; (800448c <prvAddCurrentTaskToDelayedList+0xb4>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3304      	adds	r3, #4
 8004452:	4619      	mov	r1, r3
 8004454:	4610      	mov	r0, r2
 8004456:	f7ff fa76 	bl	8003946 <vListInsert>
}
 800445a:	e010      	b.n	800447e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800445c:	4b0f      	ldr	r3, [pc, #60]	; (800449c <prvAddCurrentTaskToDelayedList+0xc4>)
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	4b0a      	ldr	r3, [pc, #40]	; (800448c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	3304      	adds	r3, #4
 8004466:	4619      	mov	r1, r3
 8004468:	4610      	mov	r0, r2
 800446a:	f7ff fa6c 	bl	8003946 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800446e:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	429a      	cmp	r2, r3
 8004476:	d202      	bcs.n	800447e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004478:	4a09      	ldr	r2, [pc, #36]	; (80044a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	6013      	str	r3, [r2, #0]
}
 800447e:	bf00      	nop
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20000524 	.word	0x20000524
 800448c:	20000420 	.word	0x20000420
 8004490:	20000528 	.word	0x20000528
 8004494:	2000050c 	.word	0x2000050c
 8004498:	200004dc 	.word	0x200004dc
 800449c:	200004d8 	.word	0x200004d8
 80044a0:	20000540 	.word	0x20000540

080044a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	3b04      	subs	r3, #4
 80044b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3b04      	subs	r3, #4
 80044c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f023 0201 	bic.w	r2, r3, #1
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	3b04      	subs	r3, #4
 80044d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80044d4:	4a0c      	ldr	r2, [pc, #48]	; (8004508 <pxPortInitialiseStack+0x64>)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3b14      	subs	r3, #20
 80044de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	3b04      	subs	r3, #4
 80044ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f06f 0202 	mvn.w	r2, #2
 80044f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	3b20      	subs	r3, #32
 80044f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80044fa:	68fb      	ldr	r3, [r7, #12]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	0800450d 	.word	0x0800450d

0800450c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004512:	2300      	movs	r3, #0
 8004514:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004516:	4b12      	ldr	r3, [pc, #72]	; (8004560 <prvTaskExitError+0x54>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451e:	d00a      	beq.n	8004536 <prvTaskExitError+0x2a>
	__asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	60fb      	str	r3, [r7, #12]
}
 8004532:	bf00      	nop
 8004534:	e7fe      	b.n	8004534 <prvTaskExitError+0x28>
	__asm volatile
 8004536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453a:	f383 8811 	msr	BASEPRI, r3
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f3bf 8f4f 	dsb	sy
 8004546:	60bb      	str	r3, [r7, #8]
}
 8004548:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800454a:	bf00      	nop
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0fc      	beq.n	800454c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004552:	bf00      	nop
 8004554:	bf00      	nop
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	2000000c 	.word	0x2000000c
	...

08004570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004570:	4b07      	ldr	r3, [pc, #28]	; (8004590 <pxCurrentTCBConst2>)
 8004572:	6819      	ldr	r1, [r3, #0]
 8004574:	6808      	ldr	r0, [r1, #0]
 8004576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800457a:	f380 8809 	msr	PSP, r0
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f04f 0000 	mov.w	r0, #0
 8004586:	f380 8811 	msr	BASEPRI, r0
 800458a:	4770      	bx	lr
 800458c:	f3af 8000 	nop.w

08004590 <pxCurrentTCBConst2>:
 8004590:	20000420 	.word	0x20000420
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004594:	bf00      	nop
 8004596:	bf00      	nop

08004598 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004598:	4808      	ldr	r0, [pc, #32]	; (80045bc <prvPortStartFirstTask+0x24>)
 800459a:	6800      	ldr	r0, [r0, #0]
 800459c:	6800      	ldr	r0, [r0, #0]
 800459e:	f380 8808 	msr	MSP, r0
 80045a2:	f04f 0000 	mov.w	r0, #0
 80045a6:	f380 8814 	msr	CONTROL, r0
 80045aa:	b662      	cpsie	i
 80045ac:	b661      	cpsie	f
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	df00      	svc	0
 80045b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80045ba:	bf00      	nop
 80045bc:	e000ed08 	.word	0xe000ed08

080045c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045c6:	4b46      	ldr	r3, [pc, #280]	; (80046e0 <xPortStartScheduler+0x120>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a46      	ldr	r2, [pc, #280]	; (80046e4 <xPortStartScheduler+0x124>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d10a      	bne.n	80045e6 <xPortStartScheduler+0x26>
	__asm volatile
 80045d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	613b      	str	r3, [r7, #16]
}
 80045e2:	bf00      	nop
 80045e4:	e7fe      	b.n	80045e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80045e6:	4b3e      	ldr	r3, [pc, #248]	; (80046e0 <xPortStartScheduler+0x120>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a3f      	ldr	r2, [pc, #252]	; (80046e8 <xPortStartScheduler+0x128>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d10a      	bne.n	8004606 <xPortStartScheduler+0x46>
	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	60fb      	str	r3, [r7, #12]
}
 8004602:	bf00      	nop
 8004604:	e7fe      	b.n	8004604 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004606:	4b39      	ldr	r3, [pc, #228]	; (80046ec <xPortStartScheduler+0x12c>)
 8004608:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	b2db      	uxtb	r3, r3
 8004610:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	22ff      	movs	r2, #255	; 0xff
 8004616:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004620:	78fb      	ldrb	r3, [r7, #3]
 8004622:	b2db      	uxtb	r3, r3
 8004624:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004628:	b2da      	uxtb	r2, r3
 800462a:	4b31      	ldr	r3, [pc, #196]	; (80046f0 <xPortStartScheduler+0x130>)
 800462c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800462e:	4b31      	ldr	r3, [pc, #196]	; (80046f4 <xPortStartScheduler+0x134>)
 8004630:	2207      	movs	r2, #7
 8004632:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004634:	e009      	b.n	800464a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004636:	4b2f      	ldr	r3, [pc, #188]	; (80046f4 <xPortStartScheduler+0x134>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3b01      	subs	r3, #1
 800463c:	4a2d      	ldr	r2, [pc, #180]	; (80046f4 <xPortStartScheduler+0x134>)
 800463e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004640:	78fb      	ldrb	r3, [r7, #3]
 8004642:	b2db      	uxtb	r3, r3
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	b2db      	uxtb	r3, r3
 8004648:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800464a:	78fb      	ldrb	r3, [r7, #3]
 800464c:	b2db      	uxtb	r3, r3
 800464e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004652:	2b80      	cmp	r3, #128	; 0x80
 8004654:	d0ef      	beq.n	8004636 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004656:	4b27      	ldr	r3, [pc, #156]	; (80046f4 <xPortStartScheduler+0x134>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f1c3 0307 	rsb	r3, r3, #7
 800465e:	2b04      	cmp	r3, #4
 8004660:	d00a      	beq.n	8004678 <xPortStartScheduler+0xb8>
	__asm volatile
 8004662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	60bb      	str	r3, [r7, #8]
}
 8004674:	bf00      	nop
 8004676:	e7fe      	b.n	8004676 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004678:	4b1e      	ldr	r3, [pc, #120]	; (80046f4 <xPortStartScheduler+0x134>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	021b      	lsls	r3, r3, #8
 800467e:	4a1d      	ldr	r2, [pc, #116]	; (80046f4 <xPortStartScheduler+0x134>)
 8004680:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004682:	4b1c      	ldr	r3, [pc, #112]	; (80046f4 <xPortStartScheduler+0x134>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800468a:	4a1a      	ldr	r2, [pc, #104]	; (80046f4 <xPortStartScheduler+0x134>)
 800468c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	b2da      	uxtb	r2, r3
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004696:	4b18      	ldr	r3, [pc, #96]	; (80046f8 <xPortStartScheduler+0x138>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a17      	ldr	r2, [pc, #92]	; (80046f8 <xPortStartScheduler+0x138>)
 800469c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80046a2:	4b15      	ldr	r3, [pc, #84]	; (80046f8 <xPortStartScheduler+0x138>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a14      	ldr	r2, [pc, #80]	; (80046f8 <xPortStartScheduler+0x138>)
 80046a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80046ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80046ae:	f000 f8dd 	bl	800486c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80046b2:	4b12      	ldr	r3, [pc, #72]	; (80046fc <xPortStartScheduler+0x13c>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80046b8:	f000 f8fc 	bl	80048b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80046bc:	4b10      	ldr	r3, [pc, #64]	; (8004700 <xPortStartScheduler+0x140>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a0f      	ldr	r2, [pc, #60]	; (8004700 <xPortStartScheduler+0x140>)
 80046c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80046c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80046c8:	f7ff ff66 	bl	8004598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80046cc:	f7ff fd48 	bl	8004160 <vTaskSwitchContext>
	prvTaskExitError();
 80046d0:	f7ff ff1c 	bl	800450c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3718      	adds	r7, #24
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	e000ed00 	.word	0xe000ed00
 80046e4:	410fc271 	.word	0x410fc271
 80046e8:	410fc270 	.word	0x410fc270
 80046ec:	e000e400 	.word	0xe000e400
 80046f0:	2000054c 	.word	0x2000054c
 80046f4:	20000550 	.word	0x20000550
 80046f8:	e000ed20 	.word	0xe000ed20
 80046fc:	2000000c 	.word	0x2000000c
 8004700:	e000ef34 	.word	0xe000ef34

08004704 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
	__asm volatile
 800470a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	607b      	str	r3, [r7, #4]
}
 800471c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800471e:	4b0f      	ldr	r3, [pc, #60]	; (800475c <vPortEnterCritical+0x58>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	3301      	adds	r3, #1
 8004724:	4a0d      	ldr	r2, [pc, #52]	; (800475c <vPortEnterCritical+0x58>)
 8004726:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004728:	4b0c      	ldr	r3, [pc, #48]	; (800475c <vPortEnterCritical+0x58>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d10f      	bne.n	8004750 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004730:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <vPortEnterCritical+0x5c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <vPortEnterCritical+0x4c>
	__asm volatile
 800473a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473e:	f383 8811 	msr	BASEPRI, r3
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	f3bf 8f4f 	dsb	sy
 800474a:	603b      	str	r3, [r7, #0]
}
 800474c:	bf00      	nop
 800474e:	e7fe      	b.n	800474e <vPortEnterCritical+0x4a>
	}
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	2000000c 	.word	0x2000000c
 8004760:	e000ed04 	.word	0xe000ed04

08004764 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800476a:	4b12      	ldr	r3, [pc, #72]	; (80047b4 <vPortExitCritical+0x50>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10a      	bne.n	8004788 <vPortExitCritical+0x24>
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	607b      	str	r3, [r7, #4]
}
 8004784:	bf00      	nop
 8004786:	e7fe      	b.n	8004786 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004788:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <vPortExitCritical+0x50>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3b01      	subs	r3, #1
 800478e:	4a09      	ldr	r2, [pc, #36]	; (80047b4 <vPortExitCritical+0x50>)
 8004790:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004792:	4b08      	ldr	r3, [pc, #32]	; (80047b4 <vPortExitCritical+0x50>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d105      	bne.n	80047a6 <vPortExitCritical+0x42>
 800479a:	2300      	movs	r3, #0
 800479c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80047a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	2000000c 	.word	0x2000000c
	...

080047c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80047c0:	f3ef 8009 	mrs	r0, PSP
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	4b15      	ldr	r3, [pc, #84]	; (8004820 <pxCurrentTCBConst>)
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	f01e 0f10 	tst.w	lr, #16
 80047d0:	bf08      	it	eq
 80047d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047da:	6010      	str	r0, [r2, #0]
 80047dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047e4:	f380 8811 	msr	BASEPRI, r0
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f7ff fcb6 	bl	8004160 <vTaskSwitchContext>
 80047f4:	f04f 0000 	mov.w	r0, #0
 80047f8:	f380 8811 	msr	BASEPRI, r0
 80047fc:	bc09      	pop	{r0, r3}
 80047fe:	6819      	ldr	r1, [r3, #0]
 8004800:	6808      	ldr	r0, [r1, #0]
 8004802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004806:	f01e 0f10 	tst.w	lr, #16
 800480a:	bf08      	it	eq
 800480c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004810:	f380 8809 	msr	PSP, r0
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	f3af 8000 	nop.w

08004820 <pxCurrentTCBConst>:
 8004820:	20000420 	.word	0x20000420
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004824:	bf00      	nop
 8004826:	bf00      	nop

08004828 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
	__asm volatile
 800482e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	607b      	str	r3, [r7, #4]
}
 8004840:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004842:	f7ff fbd5 	bl	8003ff0 <xTaskIncrementTick>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800484c:	4b06      	ldr	r3, [pc, #24]	; (8004868 <SysTick_Handler+0x40>)
 800484e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	2300      	movs	r3, #0
 8004856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	f383 8811 	msr	BASEPRI, r3
}
 800485e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004860:	bf00      	nop
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	e000ed04 	.word	0xe000ed04

0800486c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004870:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <vPortSetupTimerInterrupt+0x34>)
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004876:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <vPortSetupTimerInterrupt+0x38>)
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800487c:	4b0a      	ldr	r3, [pc, #40]	; (80048a8 <vPortSetupTimerInterrupt+0x3c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a0a      	ldr	r2, [pc, #40]	; (80048ac <vPortSetupTimerInterrupt+0x40>)
 8004882:	fba2 2303 	umull	r2, r3, r2, r3
 8004886:	099b      	lsrs	r3, r3, #6
 8004888:	4a09      	ldr	r2, [pc, #36]	; (80048b0 <vPortSetupTimerInterrupt+0x44>)
 800488a:	3b01      	subs	r3, #1
 800488c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800488e:	4b04      	ldr	r3, [pc, #16]	; (80048a0 <vPortSetupTimerInterrupt+0x34>)
 8004890:	2207      	movs	r2, #7
 8004892:	601a      	str	r2, [r3, #0]
}
 8004894:	bf00      	nop
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	e000e010 	.word	0xe000e010
 80048a4:	e000e018 	.word	0xe000e018
 80048a8:	20000000 	.word	0x20000000
 80048ac:	10624dd3 	.word	0x10624dd3
 80048b0:	e000e014 	.word	0xe000e014

080048b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80048b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80048c4 <vPortEnableVFP+0x10>
 80048b8:	6801      	ldr	r1, [r0, #0]
 80048ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80048be:	6001      	str	r1, [r0, #0]
 80048c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80048c2:	bf00      	nop
 80048c4:	e000ed88 	.word	0xe000ed88

080048c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08a      	sub	sp, #40	; 0x28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80048d0:	2300      	movs	r3, #0
 80048d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80048d4:	f7ff fae2 	bl	8003e9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80048d8:	4b5b      	ldr	r3, [pc, #364]	; (8004a48 <pvPortMalloc+0x180>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80048e0:	f000 f920 	bl	8004b24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80048e4:	4b59      	ldr	r3, [pc, #356]	; (8004a4c <pvPortMalloc+0x184>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4013      	ands	r3, r2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f040 8093 	bne.w	8004a18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d01d      	beq.n	8004934 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80048f8:	2208      	movs	r2, #8
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4413      	add	r3, r2
 80048fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	2b00      	cmp	r3, #0
 8004908:	d014      	beq.n	8004934 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f023 0307 	bic.w	r3, r3, #7
 8004910:	3308      	adds	r3, #8
 8004912:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <pvPortMalloc+0x6c>
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	617b      	str	r3, [r7, #20]
}
 8004930:	bf00      	nop
 8004932:	e7fe      	b.n	8004932 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d06e      	beq.n	8004a18 <pvPortMalloc+0x150>
 800493a:	4b45      	ldr	r3, [pc, #276]	; (8004a50 <pvPortMalloc+0x188>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	429a      	cmp	r2, r3
 8004942:	d869      	bhi.n	8004a18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004944:	4b43      	ldr	r3, [pc, #268]	; (8004a54 <pvPortMalloc+0x18c>)
 8004946:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004948:	4b42      	ldr	r3, [pc, #264]	; (8004a54 <pvPortMalloc+0x18c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800494e:	e004      	b.n	800495a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	429a      	cmp	r2, r3
 8004962:	d903      	bls.n	800496c <pvPortMalloc+0xa4>
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1f1      	bne.n	8004950 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800496c:	4b36      	ldr	r3, [pc, #216]	; (8004a48 <pvPortMalloc+0x180>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004972:	429a      	cmp	r2, r3
 8004974:	d050      	beq.n	8004a18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2208      	movs	r2, #8
 800497c:	4413      	add	r3, r2
 800497e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	1ad2      	subs	r2, r2, r3
 8004990:	2308      	movs	r3, #8
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	429a      	cmp	r2, r3
 8004996:	d91f      	bls.n	80049d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4413      	add	r3, r2
 800499e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <pvPortMalloc+0xf8>
	__asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	613b      	str	r3, [r7, #16]
}
 80049bc:	bf00      	nop
 80049be:	e7fe      	b.n	80049be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	1ad2      	subs	r2, r2, r3
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80049d2:	69b8      	ldr	r0, [r7, #24]
 80049d4:	f000 f908 	bl	8004be8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049d8:	4b1d      	ldr	r3, [pc, #116]	; (8004a50 <pvPortMalloc+0x188>)
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	4a1b      	ldr	r2, [pc, #108]	; (8004a50 <pvPortMalloc+0x188>)
 80049e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049e6:	4b1a      	ldr	r3, [pc, #104]	; (8004a50 <pvPortMalloc+0x188>)
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	4b1b      	ldr	r3, [pc, #108]	; (8004a58 <pvPortMalloc+0x190>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d203      	bcs.n	80049fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049f2:	4b17      	ldr	r3, [pc, #92]	; (8004a50 <pvPortMalloc+0x188>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a18      	ldr	r2, [pc, #96]	; (8004a58 <pvPortMalloc+0x190>)
 80049f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	4b13      	ldr	r3, [pc, #76]	; (8004a4c <pvPortMalloc+0x184>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004a0e:	4b13      	ldr	r3, [pc, #76]	; (8004a5c <pvPortMalloc+0x194>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	3301      	adds	r3, #1
 8004a14:	4a11      	ldr	r2, [pc, #68]	; (8004a5c <pvPortMalloc+0x194>)
 8004a16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004a18:	f7ff fa4e 	bl	8003eb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <pvPortMalloc+0x174>
	__asm volatile
 8004a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2a:	f383 8811 	msr	BASEPRI, r3
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	60fb      	str	r3, [r7, #12]
}
 8004a38:	bf00      	nop
 8004a3a:	e7fe      	b.n	8004a3a <pvPortMalloc+0x172>
	return pvReturn;
 8004a3c:	69fb      	ldr	r3, [r7, #28]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3728      	adds	r7, #40	; 0x28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	20001114 	.word	0x20001114
 8004a4c:	20001128 	.word	0x20001128
 8004a50:	20001118 	.word	0x20001118
 8004a54:	2000110c 	.word	0x2000110c
 8004a58:	2000111c 	.word	0x2000111c
 8004a5c:	20001120 	.word	0x20001120

08004a60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d04d      	beq.n	8004b0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004a72:	2308      	movs	r3, #8
 8004a74:	425b      	negs	r3, r3
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	4413      	add	r3, r2
 8004a7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	4b24      	ldr	r3, [pc, #144]	; (8004b18 <vPortFree+0xb8>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10a      	bne.n	8004aa4 <vPortFree+0x44>
	__asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	60fb      	str	r3, [r7, #12]
}
 8004aa0:	bf00      	nop
 8004aa2:	e7fe      	b.n	8004aa2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00a      	beq.n	8004ac2 <vPortFree+0x62>
	__asm volatile
 8004aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab0:	f383 8811 	msr	BASEPRI, r3
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	60bb      	str	r3, [r7, #8]
}
 8004abe:	bf00      	nop
 8004ac0:	e7fe      	b.n	8004ac0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	4b14      	ldr	r3, [pc, #80]	; (8004b18 <vPortFree+0xb8>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4013      	ands	r3, r2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d01e      	beq.n	8004b0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d11a      	bne.n	8004b0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	4b0e      	ldr	r3, [pc, #56]	; (8004b18 <vPortFree+0xb8>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	43db      	mvns	r3, r3
 8004ae2:	401a      	ands	r2, r3
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ae8:	f7ff f9d8 	bl	8003e9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <vPortFree+0xbc>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4413      	add	r3, r2
 8004af6:	4a09      	ldr	r2, [pc, #36]	; (8004b1c <vPortFree+0xbc>)
 8004af8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004afa:	6938      	ldr	r0, [r7, #16]
 8004afc:	f000 f874 	bl	8004be8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004b00:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <vPortFree+0xc0>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3301      	adds	r3, #1
 8004b06:	4a06      	ldr	r2, [pc, #24]	; (8004b20 <vPortFree+0xc0>)
 8004b08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004b0a:	f7ff f9d5 	bl	8003eb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004b0e:	bf00      	nop
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	20001128 	.word	0x20001128
 8004b1c:	20001118 	.word	0x20001118
 8004b20:	20001124 	.word	0x20001124

08004b24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b2a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004b2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004b30:	4b27      	ldr	r3, [pc, #156]	; (8004bd0 <prvHeapInit+0xac>)
 8004b32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00c      	beq.n	8004b58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	3307      	adds	r3, #7
 8004b42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0307 	bic.w	r3, r3, #7
 8004b4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	4a1f      	ldr	r2, [pc, #124]	; (8004bd0 <prvHeapInit+0xac>)
 8004b54:	4413      	add	r3, r2
 8004b56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b5c:	4a1d      	ldr	r2, [pc, #116]	; (8004bd4 <prvHeapInit+0xb0>)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004b62:	4b1c      	ldr	r3, [pc, #112]	; (8004bd4 <prvHeapInit+0xb0>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004b70:	2208      	movs	r2, #8
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1a9b      	subs	r3, r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f023 0307 	bic.w	r3, r3, #7
 8004b7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4a15      	ldr	r2, [pc, #84]	; (8004bd8 <prvHeapInit+0xb4>)
 8004b84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004b86:	4b14      	ldr	r3, [pc, #80]	; (8004bd8 <prvHeapInit+0xb4>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b8e:	4b12      	ldr	r3, [pc, #72]	; (8004bd8 <prvHeapInit+0xb4>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	1ad2      	subs	r2, r2, r3
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ba4:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <prvHeapInit+0xb4>)
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	4a0a      	ldr	r2, [pc, #40]	; (8004bdc <prvHeapInit+0xb8>)
 8004bb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	4a09      	ldr	r2, [pc, #36]	; (8004be0 <prvHeapInit+0xbc>)
 8004bba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004bbc:	4b09      	ldr	r3, [pc, #36]	; (8004be4 <prvHeapInit+0xc0>)
 8004bbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004bc2:	601a      	str	r2, [r3, #0]
}
 8004bc4:	bf00      	nop
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	20000554 	.word	0x20000554
 8004bd4:	2000110c 	.word	0x2000110c
 8004bd8:	20001114 	.word	0x20001114
 8004bdc:	2000111c 	.word	0x2000111c
 8004be0:	20001118 	.word	0x20001118
 8004be4:	20001128 	.word	0x20001128

08004be8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004bf0:	4b28      	ldr	r3, [pc, #160]	; (8004c94 <prvInsertBlockIntoFreeList+0xac>)
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	e002      	b.n	8004bfc <prvInsertBlockIntoFreeList+0x14>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d8f7      	bhi.n	8004bf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	4413      	add	r3, r2
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d108      	bne.n	8004c2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	441a      	add	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	441a      	add	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d118      	bne.n	8004c70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	4b15      	ldr	r3, [pc, #84]	; (8004c98 <prvInsertBlockIntoFreeList+0xb0>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d00d      	beq.n	8004c66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	441a      	add	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	e008      	b.n	8004c78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c66:	4b0c      	ldr	r3, [pc, #48]	; (8004c98 <prvInsertBlockIntoFreeList+0xb0>)
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	e003      	b.n	8004c78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d002      	beq.n	8004c86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c86:	bf00      	nop
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	2000110c 	.word	0x2000110c
 8004c98:	20001114 	.word	0x20001114

08004c9c <__libc_init_array>:
 8004c9c:	b570      	push	{r4, r5, r6, lr}
 8004c9e:	4d0d      	ldr	r5, [pc, #52]	; (8004cd4 <__libc_init_array+0x38>)
 8004ca0:	4c0d      	ldr	r4, [pc, #52]	; (8004cd8 <__libc_init_array+0x3c>)
 8004ca2:	1b64      	subs	r4, r4, r5
 8004ca4:	10a4      	asrs	r4, r4, #2
 8004ca6:	2600      	movs	r6, #0
 8004ca8:	42a6      	cmp	r6, r4
 8004caa:	d109      	bne.n	8004cc0 <__libc_init_array+0x24>
 8004cac:	4d0b      	ldr	r5, [pc, #44]	; (8004cdc <__libc_init_array+0x40>)
 8004cae:	4c0c      	ldr	r4, [pc, #48]	; (8004ce0 <__libc_init_array+0x44>)
 8004cb0:	f000 f8e4 	bl	8004e7c <_init>
 8004cb4:	1b64      	subs	r4, r4, r5
 8004cb6:	10a4      	asrs	r4, r4, #2
 8004cb8:	2600      	movs	r6, #0
 8004cba:	42a6      	cmp	r6, r4
 8004cbc:	d105      	bne.n	8004cca <__libc_init_array+0x2e>
 8004cbe:	bd70      	pop	{r4, r5, r6, pc}
 8004cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cc4:	4798      	blx	r3
 8004cc6:	3601      	adds	r6, #1
 8004cc8:	e7ee      	b.n	8004ca8 <__libc_init_array+0xc>
 8004cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cce:	4798      	blx	r3
 8004cd0:	3601      	adds	r6, #1
 8004cd2:	e7f2      	b.n	8004cba <__libc_init_array+0x1e>
 8004cd4:	08004fbc 	.word	0x08004fbc
 8004cd8:	08004fbc 	.word	0x08004fbc
 8004cdc:	08004fbc 	.word	0x08004fbc
 8004ce0:	08004fc0 	.word	0x08004fc0

08004ce4 <__retarget_lock_acquire_recursive>:
 8004ce4:	4770      	bx	lr

08004ce6 <__retarget_lock_release_recursive>:
 8004ce6:	4770      	bx	lr

08004ce8 <memset>:
 8004ce8:	4402      	add	r2, r0
 8004cea:	4603      	mov	r3, r0
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d100      	bne.n	8004cf2 <memset+0xa>
 8004cf0:	4770      	bx	lr
 8004cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cf6:	e7f9      	b.n	8004cec <memset+0x4>

08004cf8 <cleanup_glue>:
 8004cf8:	b538      	push	{r3, r4, r5, lr}
 8004cfa:	460c      	mov	r4, r1
 8004cfc:	6809      	ldr	r1, [r1, #0]
 8004cfe:	4605      	mov	r5, r0
 8004d00:	b109      	cbz	r1, 8004d06 <cleanup_glue+0xe>
 8004d02:	f7ff fff9 	bl	8004cf8 <cleanup_glue>
 8004d06:	4621      	mov	r1, r4
 8004d08:	4628      	mov	r0, r5
 8004d0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d0e:	f000 b869 	b.w	8004de4 <_free_r>
	...

08004d14 <_reclaim_reent>:
 8004d14:	4b2c      	ldr	r3, [pc, #176]	; (8004dc8 <_reclaim_reent+0xb4>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4283      	cmp	r3, r0
 8004d1a:	b570      	push	{r4, r5, r6, lr}
 8004d1c:	4604      	mov	r4, r0
 8004d1e:	d051      	beq.n	8004dc4 <_reclaim_reent+0xb0>
 8004d20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004d22:	b143      	cbz	r3, 8004d36 <_reclaim_reent+0x22>
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d14a      	bne.n	8004dc0 <_reclaim_reent+0xac>
 8004d2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d2c:	6819      	ldr	r1, [r3, #0]
 8004d2e:	b111      	cbz	r1, 8004d36 <_reclaim_reent+0x22>
 8004d30:	4620      	mov	r0, r4
 8004d32:	f000 f857 	bl	8004de4 <_free_r>
 8004d36:	6961      	ldr	r1, [r4, #20]
 8004d38:	b111      	cbz	r1, 8004d40 <_reclaim_reent+0x2c>
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	f000 f852 	bl	8004de4 <_free_r>
 8004d40:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004d42:	b111      	cbz	r1, 8004d4a <_reclaim_reent+0x36>
 8004d44:	4620      	mov	r0, r4
 8004d46:	f000 f84d 	bl	8004de4 <_free_r>
 8004d4a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004d4c:	b111      	cbz	r1, 8004d54 <_reclaim_reent+0x40>
 8004d4e:	4620      	mov	r0, r4
 8004d50:	f000 f848 	bl	8004de4 <_free_r>
 8004d54:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004d56:	b111      	cbz	r1, 8004d5e <_reclaim_reent+0x4a>
 8004d58:	4620      	mov	r0, r4
 8004d5a:	f000 f843 	bl	8004de4 <_free_r>
 8004d5e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004d60:	b111      	cbz	r1, 8004d68 <_reclaim_reent+0x54>
 8004d62:	4620      	mov	r0, r4
 8004d64:	f000 f83e 	bl	8004de4 <_free_r>
 8004d68:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004d6a:	b111      	cbz	r1, 8004d72 <_reclaim_reent+0x5e>
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	f000 f839 	bl	8004de4 <_free_r>
 8004d72:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004d74:	b111      	cbz	r1, 8004d7c <_reclaim_reent+0x68>
 8004d76:	4620      	mov	r0, r4
 8004d78:	f000 f834 	bl	8004de4 <_free_r>
 8004d7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d7e:	b111      	cbz	r1, 8004d86 <_reclaim_reent+0x72>
 8004d80:	4620      	mov	r0, r4
 8004d82:	f000 f82f 	bl	8004de4 <_free_r>
 8004d86:	69a3      	ldr	r3, [r4, #24]
 8004d88:	b1e3      	cbz	r3, 8004dc4 <_reclaim_reent+0xb0>
 8004d8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	4798      	blx	r3
 8004d90:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004d92:	b1b9      	cbz	r1, 8004dc4 <_reclaim_reent+0xb0>
 8004d94:	4620      	mov	r0, r4
 8004d96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004d9a:	f7ff bfad 	b.w	8004cf8 <cleanup_glue>
 8004d9e:	5949      	ldr	r1, [r1, r5]
 8004da0:	b941      	cbnz	r1, 8004db4 <_reclaim_reent+0xa0>
 8004da2:	3504      	adds	r5, #4
 8004da4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004da6:	2d80      	cmp	r5, #128	; 0x80
 8004da8:	68d9      	ldr	r1, [r3, #12]
 8004daa:	d1f8      	bne.n	8004d9e <_reclaim_reent+0x8a>
 8004dac:	4620      	mov	r0, r4
 8004dae:	f000 f819 	bl	8004de4 <_free_r>
 8004db2:	e7ba      	b.n	8004d2a <_reclaim_reent+0x16>
 8004db4:	680e      	ldr	r6, [r1, #0]
 8004db6:	4620      	mov	r0, r4
 8004db8:	f000 f814 	bl	8004de4 <_free_r>
 8004dbc:	4631      	mov	r1, r6
 8004dbe:	e7ef      	b.n	8004da0 <_reclaim_reent+0x8c>
 8004dc0:	2500      	movs	r5, #0
 8004dc2:	e7ef      	b.n	8004da4 <_reclaim_reent+0x90>
 8004dc4:	bd70      	pop	{r4, r5, r6, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20000010 	.word	0x20000010

08004dcc <__malloc_lock>:
 8004dcc:	4801      	ldr	r0, [pc, #4]	; (8004dd4 <__malloc_lock+0x8>)
 8004dce:	f7ff bf89 	b.w	8004ce4 <__retarget_lock_acquire_recursive>
 8004dd2:	bf00      	nop
 8004dd4:	2000112c 	.word	0x2000112c

08004dd8 <__malloc_unlock>:
 8004dd8:	4801      	ldr	r0, [pc, #4]	; (8004de0 <__malloc_unlock+0x8>)
 8004dda:	f7ff bf84 	b.w	8004ce6 <__retarget_lock_release_recursive>
 8004dde:	bf00      	nop
 8004de0:	2000112c 	.word	0x2000112c

08004de4 <_free_r>:
 8004de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004de6:	2900      	cmp	r1, #0
 8004de8:	d044      	beq.n	8004e74 <_free_r+0x90>
 8004dea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dee:	9001      	str	r0, [sp, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f1a1 0404 	sub.w	r4, r1, #4
 8004df6:	bfb8      	it	lt
 8004df8:	18e4      	addlt	r4, r4, r3
 8004dfa:	f7ff ffe7 	bl	8004dcc <__malloc_lock>
 8004dfe:	4a1e      	ldr	r2, [pc, #120]	; (8004e78 <_free_r+0x94>)
 8004e00:	9801      	ldr	r0, [sp, #4]
 8004e02:	6813      	ldr	r3, [r2, #0]
 8004e04:	b933      	cbnz	r3, 8004e14 <_free_r+0x30>
 8004e06:	6063      	str	r3, [r4, #4]
 8004e08:	6014      	str	r4, [r2, #0]
 8004e0a:	b003      	add	sp, #12
 8004e0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e10:	f7ff bfe2 	b.w	8004dd8 <__malloc_unlock>
 8004e14:	42a3      	cmp	r3, r4
 8004e16:	d908      	bls.n	8004e2a <_free_r+0x46>
 8004e18:	6825      	ldr	r5, [r4, #0]
 8004e1a:	1961      	adds	r1, r4, r5
 8004e1c:	428b      	cmp	r3, r1
 8004e1e:	bf01      	itttt	eq
 8004e20:	6819      	ldreq	r1, [r3, #0]
 8004e22:	685b      	ldreq	r3, [r3, #4]
 8004e24:	1949      	addeq	r1, r1, r5
 8004e26:	6021      	streq	r1, [r4, #0]
 8004e28:	e7ed      	b.n	8004e06 <_free_r+0x22>
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	b10b      	cbz	r3, 8004e34 <_free_r+0x50>
 8004e30:	42a3      	cmp	r3, r4
 8004e32:	d9fa      	bls.n	8004e2a <_free_r+0x46>
 8004e34:	6811      	ldr	r1, [r2, #0]
 8004e36:	1855      	adds	r5, r2, r1
 8004e38:	42a5      	cmp	r5, r4
 8004e3a:	d10b      	bne.n	8004e54 <_free_r+0x70>
 8004e3c:	6824      	ldr	r4, [r4, #0]
 8004e3e:	4421      	add	r1, r4
 8004e40:	1854      	adds	r4, r2, r1
 8004e42:	42a3      	cmp	r3, r4
 8004e44:	6011      	str	r1, [r2, #0]
 8004e46:	d1e0      	bne.n	8004e0a <_free_r+0x26>
 8004e48:	681c      	ldr	r4, [r3, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	6053      	str	r3, [r2, #4]
 8004e4e:	4421      	add	r1, r4
 8004e50:	6011      	str	r1, [r2, #0]
 8004e52:	e7da      	b.n	8004e0a <_free_r+0x26>
 8004e54:	d902      	bls.n	8004e5c <_free_r+0x78>
 8004e56:	230c      	movs	r3, #12
 8004e58:	6003      	str	r3, [r0, #0]
 8004e5a:	e7d6      	b.n	8004e0a <_free_r+0x26>
 8004e5c:	6825      	ldr	r5, [r4, #0]
 8004e5e:	1961      	adds	r1, r4, r5
 8004e60:	428b      	cmp	r3, r1
 8004e62:	bf04      	itt	eq
 8004e64:	6819      	ldreq	r1, [r3, #0]
 8004e66:	685b      	ldreq	r3, [r3, #4]
 8004e68:	6063      	str	r3, [r4, #4]
 8004e6a:	bf04      	itt	eq
 8004e6c:	1949      	addeq	r1, r1, r5
 8004e6e:	6021      	streq	r1, [r4, #0]
 8004e70:	6054      	str	r4, [r2, #4]
 8004e72:	e7ca      	b.n	8004e0a <_free_r+0x26>
 8004e74:	b003      	add	sp, #12
 8004e76:	bd30      	pop	{r4, r5, pc}
 8004e78:	20001130 	.word	0x20001130

08004e7c <_init>:
 8004e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7e:	bf00      	nop
 8004e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e82:	bc08      	pop	{r3}
 8004e84:	469e      	mov	lr, r3
 8004e86:	4770      	bx	lr

08004e88 <_fini>:
 8004e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8a:	bf00      	nop
 8004e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8e:	bc08      	pop	{r3}
 8004e90:	469e      	mov	lr, r3
 8004e92:	4770      	bx	lr
